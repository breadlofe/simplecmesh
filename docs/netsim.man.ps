%!PS-Adobe-3.0
%%Title: (NETSIM Reference Manual)
%%Creator: (Microsoft Word: LaserWriter 8.0 8.0)
%%CreationDate: (1:29 PM Thursday, July 1, 1993)
%%For: ()
%%Pages: 23
%%DocumentFonts: Helvetica-Bold Helvetica-BoldOblique Times-BoldItalic Times-Roman Times-Bold Times-Italic Symbol Courier
%%DocumentNeededFonts: Helvetica-Bold Helvetica-BoldOblique Times-BoldItalic Times-Roman Times-Bold Times-Italic Symbol Courier
%%DocumentSuppliedFonts:
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%Orientation: Portrait
%ADO_PaperArea: -31 -31 761 581
%ADO_ImageableArea: 0 0 730 552
%%EndComments
/md 251 dict def md begin
/currentpacking where {pop /sc_oldpacking currentpacking def true setpacking}if
%%BeginFile: adobe_psp_basic
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/bd{bind def}bind def
/xdf{exch def}bd
/xs{exch store}bd
/ld{load def}bd
/Z{0 def}bd
/T/true
/F/false
/:L/lineto
/lw/setlinewidth
/:M/moveto
/rl/rlineto
/rm/rmoveto
/:C/curveto
/:T/translate
/:K/closepath
/:mf/makefont
/gS/gsave
/gR/grestore
/np/newpath
14{ld}repeat
/$m matrix def
/av 80 def
/por true def
/normland false def
/psb-nosave{}bd
/pse-nosave{}bd
/us Z
/psb{/us save store}bd
/pse{us restore}bd
/level2
/languagelevel where
{
pop languagelevel 2 ge
}{
false
}ifelse
def
/featurecleanup
{
stopped
cleartomark
countdictstack exch sub dup 0 gt
{
{end}repeat
}{
pop
}ifelse
}bd
/noload Z
/startnoload
{
{/noload save store}if
}bd
/endnoload
{
{noload restore}if
}bd
level2 startnoload
/setjob
{
statusdict/jobname 3 -1 roll put
}bd
/setcopies
{
userdict/#copies 3 -1 roll put
}bd
level2 endnoload level2 not startnoload
/setjob
{
1 dict begin/JobName xdf currentdict end setuserparams
}bd
/setcopies
{
1 dict begin/NumCopies xdf currentdict end setpagedevice
}bd
level2 not endnoload
/pm Z
/mT Z
/sD Z
/realshowpage Z
/initializepage
{
/pm save store mT concat
}bd
/endp
{
pm restore showpage
}def
/$c/DeviceRGB def
/rectclip where
{
pop/rC/rectclip ld
}{
/rC
{
np 4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
clip np
}bd
}ifelse
/rectfill where
{
pop/rF/rectfill ld
}{
/rF
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
fill
gR
}bd
}ifelse
/rectstroke where
{
pop/rS/rectstroke ld
}{
/rS
{
gS
np
4 2 roll
:M
1 index 0 rl
0 exch rl
neg 0 rl
:K
stroke
gR
}bd
}ifelse
%%EndFile
%%BeginFile: adobe_psp_colorspace_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/G/setgray ld
/:F/setrgbcolor ld
%%EndFile
level2 startnoload
%%BeginFile: adobe_psp_patterns_level1
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/patfreq Z
/patangle Z
/bk Z
/fg Z
/docolorscreen Z
/graystring Z
/pattransf{}def
/initQDpatterns
{
/patfreq 9.375 store
/patangle
1 0 $m defaultmatrix dtransform
exch atan
por not
{90 add}if
normland{180 add}if
store
:a
}def
/docolorscreen
/setcolorscreen where
{
pop/currentcolorscreen where
{
pop/setcmykcolor where
{
pop true
}{
false
}ifelse
}{
false
}ifelse
}{
false
}ifelse
def
/setgraypattern
{
/graystring xs
patfreq
patangle
{
1 add
4 mul
cvi
graystring
exch get
exch
1 add 4 mul
cvi
7 sub
bitshift
1 and
}setscreen
64 div setgray
}bd
/:b
{
/pattransf load settransfer
pop pop pop
setgraypattern
}bd
docolorscreen startnoload
/screensave 5 array def
/:a{currentgray currentscreen currenttransfer screensave astore pop}bd
/:e{screensave aload pop settransfer setscreen setgray}bd
/:d
{
pop pop pop
/pattransf load settransfer
setgraypattern 8{pop}repeat
}bd
/:c
/:d ld
docolorscreen endnoload docolorscreen not startnoload
/screensave 20 array def
/:a{currentcmykcolor currentcolorscreen currentcolortransfer screensave astore pop}bd
/:e{screensave aload pop setcolortransfer setcolorscreen setcmykcolor}bd
/rstring Z
/grstring Z
/blstring Z
/convroll{64 div 4 -1 roll}bd
/setcolorpattern
{
/graystring xs
/blstring xs
/grstring xs
/rstring xs
patfreq
patangle
{
1 add 4 mul cvi rstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi grstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi blstring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
patfreq
patangle
{
1 add 4 mul cvi graystring
exch get exch 1 add 4 mul
cvi 7 sub bitshift 1 and
}
setcolorscreen
convroll convroll convroll convroll
setcmykcolor
}bd
/:d
{
pop pop pop
/pattransf load settransfer
pop pop setcolorpattern
}bd
/:c
/:d ld
docolorscreen not endnoload
%%EndFile
level2  endnoload level2 not startnoload
%%BeginFile: adobe_psp_patterns_level2
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/pmtx Z
/BGnd Z
/FGnd Z
/PaintData Z
/PatternMtx Z
/PatHeight Z
/PatWidth Z
/$d Z
/savecolor 4 array def
/savecolorspace Z
/:a{
mark 0 0 0 currentcolor savecolor astore pop cleartomark
/savecolorspace currentcolorspace store
}bd
/:e{
savecolorspace setcolorspace
mark savecolor aload pop setcolor cleartomark
}bd
/initQDpatterns
{
gS
initmatrix
mT dup 4 get exch 5 get :T
1 0 dtransform round exch round exch idtransform
dup mul exch dup mul exch add sqrt
0 1 dtransform round exch round exch idtransform
dup mul exch dup mul exch add sqrt
neg
scale
0
por not{90 add}if
normland{180 add}if
rotate
matrix currentmatrix
gR
/pmtx xs
:a
}bd
/:t
{
14 dict begin
/BGnd xdf
/FGnd xdf
/PaintData xdf
/PatternType 1 def
/PaintType 1 def
/BBox[0 0 1 1]def
/TilingType 1 def
/XStep 1 def
/YStep 1 def
/PatternMtx[24 0 0 24 0 0]def
/PaintProc
BGnd null ne
{
{
begin
BGnd aload pop :F
0 0 1 1 rF
FGnd aload pop :F
24 24 true PatternMtx PaintData imagemask
end
}
}{
{
begin
FGnd aload pop :F
24 24 true PatternMtx PaintData imagemask
end
}
}ifelse
def
currentdict
PatternMtx
end
gS $c setcolorspace pmtx setmatrix makepattern gR
}bd
/:u
{
14 dict begin
/$d 8 dict def
/PatternType 1 def
/PaintType 1 def
/BBox[0 0 1 1]def
/TilingType 1 def
/XStep 1 def
/YStep 1 def
/PaintData xdf
/PatHeight xdf
/PatWidth xdf
/PatternMtx[PatWidth 0 0 PatHeight 0 0]def
$d begin
/ImageType 1 def
/MultipleDataSource false def
/Height PatHeight def
/Width PatWidth def
/Decode[0 1 0 1 0 1]def
/ImageMatrix PatternMtx def
/DataSource PaintData def
/BitsPerComponent 8 def
end
/PaintProc
{
begin
$d image
end
}def
currentdict
PatternMtx
end
gS $c setcolorspace pmtx setmatrix makepattern gR
}bd
/bk[1 1 1]def
/fg[0 0 0]def
/:b{
:t
setpattern
pop pop
}bd
/:d{
:t
setpattern
10{pop}repeat
}bd
/:c{
:u
setpattern
10{pop}repeat
}bd
%%EndFile
level2 not endnoload
level2 startnoload
%%BeginFile: adobe_psp_level1_basicimages
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$i false def
/flipinvert
statusdict begin
version cvr 47.0 lt
end
def
/iw Z
/ih Z
/im_save Z
/setupimageproc Z
/polarity Z
/smoothflag Z
/$z Z
/bpc Z
/smooth_moredata Z
/datatype Z
/:f
{
/im_save save store
/datatype xs
$i flipinvert
and
xor
/polarity xs
/smoothflag xs
:T
scale
/$z exch string store
/bpc xs
/ih xs
/iw xs
/smoothflag
smoothflag
bpc 1 eq and
smoothflag and
userdict/sc_smooth known and
vmstatus pop exch pop iw 3 mul sub 1000 gt and
iw 4 mul 7 add 8 idiv 4 mul 65535 le and
store
smoothflag{
iw
ih
$z
iw 7 add 8 idiv 4 mul string
iw 4 mul 7 add 8 idiv 4 mul string
true
false
sc_initsmooth
/iw iw 4 mul store
/ih ih 4 mul store
}if
/setupimageproc datatype 0 eq datatype 1 eq or{
smoothflag{
{
[
/smooth_moredata cvx[
currentfile
$z
{readstring readhexstring}datatype get
/pop cvx
]cvx[
$z
]cvx/ifelse cvx
/sc_smooth cvx
/smooth_moredata/exch cvx/store cvx
]cvx bind
/smooth_moredata true store
dup exec pop dup exec pop
}
}{
{
[
currentfile
$z
{readstring readhexstring}datatype get
/pop cvx
]cvx bind
}
}ifelse
}{
(error, can't use level2 data acquisition procs for level1)print flush stop
}ifelse
store
}bd
/:j{im_save restore}bd
/:g
{
1 setgray
0 0 1 1 rF
0 setgray
iw ih polarity[iw 0 0 ih 0 0]setupimageproc
imagemask
}bd
/:h
{
setrgbcolor
0 0 1 1 rF
setrgbcolor
iw ih polarity[iw 0 0 ih 0 0]setupimageproc
imagemask
}bd
/:i
{
setrgbcolor
iw ih polarity[iw 0 0 ih 0 0]setupimageproc
imagemask
}bd
%%EndFile
level2  endnoload level2 not startnoload
%%BeginFile: adobe_psp_level2_basicimage
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$j 9 dict dup
begin
/ImageType 1 def
/MultipleDataSource false def
end
def
/im_save Z
/setupimageproc Z
/polarity Z
/smoothflag Z
/bpc Z
/ih Z
/iw Z
/datatype Z
/:f
{
/im_save save store
/datatype xs
datatype 0 lt datatype 4 gt or{
(error, datatype out of range)print flush stop
}if
/setupimageproc{
{
currentfile
}
{
currentfile 0(%ADOeod)/SubFileDecode filter/ASCIIHexDecode filter
}
{
currentfile/RunLengthDecode filter
}
{
currentfile/ASCII85Decode filter/RunLengthDecode filter
}
{
currentfile/ASCII85Decode filter
}
}datatype get store
{
[1 0]
}{
[0 1]
}ifelse
/polarity xs
/smoothflag xs
:T
scale
pop
/bpc xs
/ih xs
/iw xs
$c setcolorspace
}bd
/:j{im_save restore}bd
/:g
{
1 G
0 0 1 1 rF
0 G
$j dup begin
/Width iw def
/Height ih def
/Decode polarity def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 1 def
/Interpolate smoothflag def
end
imagemask
}bd
/:h
{
:F
0 0 1 1 rF
:F
$j dup begin
/Width iw def
/Height ih def
/Decode polarity def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 1 def
/Interpolate smoothflag def
end
imagemask
}bd
/:i
{
:F
$j dup begin
/Width iw def
/Height ih def
/Decode polarity def
/ImageMatrix[iw 0 0 ih 0 0]def
/DataSource setupimageproc def
/BitsPerComponent 1 def
/Interpolate smoothflag def
end
imagemask
}bd
%%EndFile
level2 not endnoload
%%BeginFile: adobe_psp_smooth
%%Copyright: Copyright 1991-1993 Adobe Systems Incorporated. All Rights Reserved.
/junk Z
/$z Z
userdict/sc_smooth known not
save
systemdict/eexec known
systemdict/cexec known and{
countdictstack mark
false
<1861AEDAE118A9F95F1629C0137F8FE656811DD93DFBEA65E947502E78BA12284B8A58EF0A3
2E272778DAA2ABEC72A84102D591E11D96BA61F57877B895A752D9BEAAC3DFD7D3220E2BDE7
C036467464E0E836748F1DE7AB6216866F130CE7CFCEC8CE050B870C11881EE3E9D70919>
{eexec}stopped{
cleartomark
countdictstack exch sub dup 0 gt{{end}repeat}{pop}ifelse
false
}{
{cleartomark pop true}{cleartomark pop false}ifelse
}ifelse
}{false}ifelse
exch restore and
level2 not and
vmstatus exch sub exch pop 15000 gt and
{
currentfile eexec
}{
/junk save store
/$z 4795 string store
currentfile $z readhexstring pop pop
{
currentfile $z readline not
{
stop
}if
(%ADOendeexec)eq
{
exit
}if
}bind loop
junk restore
}ifelse
bc89dd93a62e673f17beaf79fc308801f2548cc0804b6e7e7211db7d71dcacee61d4db4b
cc4c192da6ec1c558421396b4eb1944f656db0dda1626374294528747cd1ee8e10b15c5c
60b4182960a4687e44c92cff1b5d29a6b48ab8be9f8115c642241a4901d75a2b2ba55d27
0620b884f37689503d9c3a603e89a1f7de7447e2b23145af7219c13aad065fe60313c4f1
7d1959166b8493e26ee828d6e76ac472747b40432571d2d101dd3e8696849eb59b70c328
a0d1978eea220593cb3024a3cdecb89dcfa2d5ab3990b0bbc1a0c3351bfbd614917e7ede
ef79cb8843325e4a81a80e809250ce8cf7297b5c684b53a56538b373cb085ec7436f82a2
e48b4789de5ac368defd97ca81e1e7a584b7e40bcf852c3d4f6cc387172784295be04ca2
0793987d64efc3cec658553cbe610fa9ebfe74341192cfcc6ecfd0a4843b740cbfd5ba5f
4c076050268792190676f76cacc26be628f8ae1c48419803c2a5108f6b1bec6664b06248
6a083d8092cb3c82b90bded3eed0387490fe971d6614c5d0259a846d43abb22e0dc06aa5
6911c9f53cf5524e138662db3fa2e6cdfe30873d916ed70e4962ed78b32491bee9a20a36
8be439dc6245d5751e6899e2214c07df7a87b66b1aba9a8196db2add3d3c4e3057dc9a9c
dae1cc7884a6f29a5568b1ad64143fd479b8b4a8fbef4db889fe42edaadef0276f79d192
245b64299ad347b03ecf887db96b16fc319a1c7e59718ac7ff7bc7bafd4523bd88fd5ba8
1730817c2f529d3060cb591fe565d778fc989e7e14f7c2a7b85785c53af35fbe738da838
cdf80c9a048f4d7dbd58e2c9f527d2d3b2ad633da1005036298ec8533b94f84e9246289c
f03336f4a7f657afbcbdd7b5e16187273c459f5626a5667db4fbf8b85ef2363ee6d89bd0
f402408cae3065fecf609fa290047e9656d853739f33b06d64a4a57f66f37f7da39fa89d
28962fddb76e8d05683c090664175dda6a1be57698894fd9f0f9d8da411b3f33b3b9c8d4
50a27c37e4a0e503418cd6c02cf60fa7fbb6f6f3e7509a45a54343ba3361168d895a27eb
6923ab65b019b188fe21c804629f2be2a20e6417841b4c8d5d68fb38db71ac7174e68d03
0611ea29f9ca740d0aef611a1f0003e1d136a539ed28d956a2a36bc7ae0ee290bd818175
3537e39be7777de1004964c769ec7e933b17c852cbd2da4cc100d9d3e141106eea9cc29a
b1c910ead768527a02711ac035262c93a4548f67fb501a971e0a86d819547bac7c09f5fb
aec454c9c7276f5e317cc8fd8876e7f90dc128f03052a756cf6db9876fe5a31c9d6a139b
d46eb34272ff7992b86c88420ab07e801a39e91afb3c048b40913dc2d984e0c347b3daea
4e1ce5a15c8df7b65a0b89136f6a48a92b8f096d708a2bea4390f0454dcc3d9cd4f6b24d
8f06faa17694172213c481ceaa1f7fe33f1389142f017874560e1b0272385585fc5681de
4a909566cdcf9af80dfde23e9ad55083bb9422ae57b99bf3d5f081a4cbe0172f236abbb5
06fbbee46987543fc545e81ecd61477fadec55640ce9e41f8cbcd409f0e64c1b83193885
dffe0c4c383de781943a2a73ad1e0cbee0dccdbc3bbbc010f3adc8aa597210cae47003d2
952b8e874e1dee33ef1a78180a3ef6b22e1a66385147f550678510b15ed1a02fc85e736e
818f03b188d6a23f070e5720195a8e4c295d27129a5adedc1a95145d5e758649acebaec5
3d14cbc9feaf3abcecc976c03d00ea640c3b852baad7d8ab28c593cb74cbe2e98ea0b35c
8827eb3def1a79af837fb8468b2042acaf226b1f6d11abab2884f3fe49772325d273f893
82badc7b3b26e43c3f6170eec2c607cbe22225b9469de5509d31bafa1729c416089aeb1b
3b5477a985acdce47557bf29130d6232d2003a4314bf46c9c9383c437f1f2597f361405a
b92f371458f13d8d400d78140df094a559bec9d240993f2d811f0d4eba7678773bb6c765
caf33bc77c0e2e156538b04423e513cb933d9ac8cec0444e0309bdb5c70f02a71f49cc99
7b8d98ecbaad1d53daa2811b07df94b2ec574326d760892fd1886703eed816bf2db96bbe
f2ea914cef918d251a1203d93d549aa438a1309ce179c233111175d9e8bb6064dc2d52db
0976650b1d5d194eab20ed3e500db4410852390e69e56e4ab71e97a87680fa620d8d32d5
b93e40cdec16ed20af734e792ddb938b8a65ccb811f369cc1e9e8819e76d7908e310e5ea
018c05d2db74abc0e8e5da75431324a3ba298820009d6fcc9d5693ec900aab8745112928
ef24a8da713dc8ecebb84394f0058335dafb459971cf20e8c15d40f35643a0c56c95bd86
faefe8e251fb9f79a6db5e481032f812454181a73375ab1efe575d745fe7073adaf60865
e992c7f5e969f4e267b323bb022a7f8b1b480a97ca735212b4d47aff196f37fa177c765a
f03487b323f2ce11314906d04dcb0c3c770ea581fcff70cc1553b4615a6d8dfd69001581
77a9fcc035cb44d630b99cdae09de33c09c9ab8bcc021e72fd88cccf3a9cd578a34a3f96
ae636047fc5f468d22cea0cf509e1588563c7e25d4f0d41b30373dfd1cb69a8e37a51a57
5d1cab7a3c9d04f3d388db04ed78d3e81e7b53dffa94507df197e467565d4169fc996e46
671f62236b00f4e9dc36bd3709400771ed4b335bcdb3c2974c0a00c03717ed980e98dc1b
2473f38bd1e1fe4da0fea5169aa1e06054315579a5898bbe3c9fabb829485562e9d25248
142575f3bfd311dde2297c7883b0b9ed0c3ffe3358880c8c77be01cd6408dc743634006f
d888ffc1e4562ed1166bbdcbe971a269afae52a8a384eaf8880433a053bd072accc62214
04bb18e98b9cebb3c05e56216b56174bd432e41b8c82c82d7114adb16ad941fe87c0657e
03203fc26ed43096e7e262a8f86fc07506b3ffcb5888bcbd3482977716a337a54c0649c1
2579b4322afcb34486a5593fb9d58cb16a0368f593c3c52608bf31c6a3b48a04be605c60
b15ea2670c3e89d293ba065db7d5471d3f56d7ffe3ba48814d5a1f4a81d9865d1f2340cc
3e5ced23ce6827065312bb9ae13e0d3cc53e79aaa764a229be203d1b45963d17e983f72a
f97bac50984a360768f459585745d94f7b77457bb8bc802332aef4e65ae7200d94750aea
b4ede71ade6ee000cf122866f514747784f7e497a6e48b82467515f474d38ec690bac331
d8246eacf2b10d7f1b1b74b1020843b3d934115e23fc1845e5161f5d494badc22f5e68fa
4d1cb3933ac6467e3cc58099adcf4832c156ce1714ee44c6368dee76483e47260dda3af1
97f938530475ede86f1b7ccfeeaeab2518f1c05ba983ada09c069d0f5e7e34c7832ec4c1
9e68e78a51e25540cadf7b64d1eca1141816aba211cea9b8aa4ff9542f26cd6adabe28bc
03c20d2fded392cc160e5ca6f8216611e41b504567927a560537a57e09dd8db552fab25d
59318ad3f7e6b6e10ad49fbb4caf8d5205d494666f5c51a599df65d2c89fe65c92ec733d
78205e987659e02d244684cff18d2b6f1d0d33ccae32339b840246a50cccebc952c7e705
d30fcb5dc94da2eab7ba3c7f9fe536eba4971a8b8e0744a0a094d531ae611042c347fac7
3b770c445121464594a2c5eb9d923f0fe2f33500b403e4b5daf64acd4a4a89d8469be57f
a393a844e082dec5af117b77e7be0eb6474eb47b00503bc68c809f0de147f7d0f1f68798
89b1781d09c0dc12c882dba17e23de1311321fa851a94c51a8801a4bf7c888e4805b1fc8
2fe638aaabb33b13ab0ae024b0b767108a068d562ebd11a91ad8706df9360a914927b752
ddb4d176f72661d12a6349a58a8d688b311ec8e1797b011dbb47760765b88a651b42cace
e60730553040e64711fff10e3285171ed1dae0545b6cfe3503b24f9d135d04d467372b11
ef3c1b9aa7c4272e281df0b6e7cc7e7984b00cbda5bbd81c939213c32176b5e062660e54
8943afe1e39a38cb171d7591c01ac4eea3963572ce008d48727ec8efc0ead1cc4c86d9ce
3d9d5c21f58a41359f2599d4cb15762366c3d3c5b7abe7970a312ea2fb14f5e74f78284a
624fe71f362f4b4d892ac6a87cf8794982964aa0e6153477da1484d35787edb8a2aad90b
3cada91934c118098617e1254d834d86154e6585628663741ae0d7bf339b168d4acec9da
94c12bd5449ecf97a7483e27c47160f838ac076f79b82fc0bd8a3b0011bd0bbb2e6a38ff
a7a63daf463cacb10f56c459bec699ecbcc52be2e5c57bd013c4682b01199cdd89ad2bd1
8584b05e6178c2d6fdc6e19a375ae4a91428d4c0aff2d07e5b6d159351475e57419f2ec8
a343d209e36ddb078027e03d4f179fbf675373c485be1a147ffda00821aba79187471ef9
55f197d6bf0f442244d5b4d1e8392ba11965b6bfa8db30c0e48984883a9b6ec840a9b6fc
93df40c82906dac253e0afd633c336cedac8dd7213e4766761ec3cf3a8aacb1fe1bf2d61
d64c5addaf1d836e199df0ef5e61029f1e6a28c17eba0d8bdf81f358058086ee365b4127
a1bb4b273b84a825fdcc4ebd3abdd7ca243788e1eb48aed96626bd2f2ef8a2e1a082acb6
64b5af60797d9ad021ac616e4d65c1ddbc4a74928b7ab089a10db9312a18d682cccce0b5
53e2f454af0ca21f59b96ee7d71a97db2607dba56daad1bef91c66c44f6fc53d2b4bfebb
876cd478243a9454e8864f65067787b96cb4b3f92a7c90f959ce3324c94590348a8d2709
f4feea7adaf4c56199da203d8f4b9866fe7362d86401b0cfe1913476eb9f7f4d4df0f2f3
8e7ee153c99dda1ccc6eec2cd1b76c52c553ceca04ad525fc17a4a7af197d158c02e6469
cd7e3be4b934ed0e1499153bb98b4363159a60c9ce892af085511cfc31cfa7fa1baf0e22
d138b6a54e93532486b633024d18afd6a610ede93b2a554abc44da890144ff060d1db1e3
e57df15229afe56c49e3c7f68e6ef0221942945f3c6675b498e94fd834bfcd869bba0a90
179d3eb859ea6b749871a62c0e8513ab69b63e35b5bf8060f25442a6670293cee9a86928
997a54929695b3eda64483ecdf8cfb2732729a652e08a3aa82ecb5ac45aad7227f7f7ee9
1d8c222933cfac18561f27939ca29fbf5eebd634555856519cd2f1573281514aff3c6091
5142196c57177ef2086958fbb3fae8f448118c435ae82b7b17a8445e0806b8442e1f9347
c7940af7342dc3d5638958f9a3952768f6c244920e281a163cc87fbdbec99080b8d7e24b
9e35e152aa600a6a4faebb140857e536bb819f4cd9992b9dfaa60ac33a8ff2ed14c791e7
0290e5f6d810488d672224bfeeca6907b41f46489091322b6830a8424fa2a0061151ee61
ef1cfb1a83c4538025605554ed3c734fd8e39bd6da4af6e5a57593da83fd9f511af49b84
5ef7cb34495b54070ea204daff2e266f5a1619928e73de256979f4afdeb42b889064461b
f7263f82a2c233d113de9ba4bc415ed68241bc3862a34050479aa86eabb80cef561ad640
80be73a5da7fbb4905bee2fbbbc7c85a5512c6e747a5eb18942e47c17e5da1127910d8e6
ed7a37d3b846cfda6b0adc8dd594ffe14995b32babcb4d99869090abd57e8ab397e33406
2c7790b673d184738a9e9d578f54ccfcdcc46200d2bb07c5dea46261680dccb4f011428f
289c2049ff81040685aec9ae8c9016c491d02f14f2c4fd79e053147520d59d034c470569
e602c662af4aafc5d2fb0d3af218b26b769ac25fe9999ba3c2eaa8a9ffa93a6f4b743608
f5797772e53cfd2f3c6a45b1a843fcfc6aedc66bc35db923bea051301fa5a959a11eb0b6
f02f7c4e6b004ce548b77e032e36f93cce55f507d5892b32da81a7ce5016326aacd06dd5
0a1b3c615abf06ab6eb1bd643f3c3d7fbc9e18bc11ee29b2113d5c458f20713d3b811da8
883f8b95557ffb1eaf229b89fc98f7623ff9140bcebc6b8677ad7d99373e5757292a3d6a
83a5c053e61224b4dc14e42626637e714c514092e569101ce75f0533605802455f03bf0e
336c0f9788569f3b2b4b79c01628abc3b243decb3c55e1273ff7b83ae61d936bd413580f
3f279437da1fdad63d785ff7bedd815a6d6e4964231adf28640794c33a30686e5f60fe78
c5e87ffd27a84452dc111bbd7c2d0b4e7781c102547f5533ea676a33b8d58918f197a8cd
a1e90be9620e43af9d5b07ee2ae5d702683c9a6973fdaafaec74d62cb29b18272b3f8840
a1a8372ddf4bfee1b7ea037ed41fdc2cb1cb4da3ccb3e121354db0d5bc83c4d4c323083d
75dd32c20607f81fcd221751c5af21775659e804b9941cf6fbe4c8846be20e546f88a588
7bbff8cab4489883fdd2be613313174c015d69eee40eee4242e173aaac87585597feff69
a64f4ef2dbf00dbfe9ad946892816711c7199d4068d8494ba1df614d9bbe1c7b63996e98
12b913966a42a41be0dc85feff232e625f4dd0b01cb7674b232e89d5da143f9d12a9d8a9
aa8b62038721ad9e4a6438cb842d1828458fc25e5b0b6ea795f7a14d2f55f1451c615f4c
211469611d1348952e655e1d93188c0dc6dd719630a42fe5baf8cde0c03b1e0aa76a2cd4
fec86a3042f8a2ea5af50a43af52c1217f6be45b152e47d165b89a54ede432f1eb3ed3ef
428c228dd53c44db15541704b99413b465ff65ca0e9d6be932a18eca713c71ba7dc89238
1e0c2c62cf8567df2f997e58ed2c1ffe17d2fc96db942ce3950e28d1287b85ff7d07adb9
059629dc89b9b0ed2213e45d8a20188cae18f3391887387bf8ba0a12fe21fa0aa521bfa3
718f7abe76388e
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%ADOendeexec

%%EndFile
%%BeginFile: adobe_psp_uniform_graphics
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/@a
{
np :M 0 rl :L 0 exch rl 0 rl :L fill
}bd
/@b
{
np :M 0 rl 0 exch rl :L 0 rl 0 exch rl fill
}bd
/arct where
{
pop
}{
/arct
{
arcto pop pop pop pop
}bd
}ifelse
/x1 Z
/x2 Z
/y1 Z
/y2 Z
/rad Z
/@q
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
fill
}bd
/@s
{
/rad xs
/y2 xs
/x2 xs
/y1 xs
/x1 xs
np
x2 x1 add 2 div y1 :M
x2 y1 x2 y2 rad arct
x2 y2 x1 y2 rad arct
x1 y2 x1 y1 rad arct
x1 y1 x2 y1 rad arct
:K
stroke
}bd
/@i
{
np 0 360 arc fill
}bd
/@j
{
gS
np
:T
scale
0 0 .5 0 360 arc
fill
gR
}bd
/@e
{
np
0 360 arc
:K
stroke
}bd
/@f
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 0 360 arc
:K
$m setmatrix
stroke
}bd
/@k
{
gS
np
:T
0 0 :M
0 0 5 2 roll
arc fill
gR
}bd
/@l
{
gS
np
:T
0 0 :M
scale
0 0 .5 5 -2 roll arc
fill
gR
}bd
/@m
{
np
arc
stroke
}bd
/@n
{
np
$m currentmatrix
pop
:T
scale
0 0 .5 5 -2 roll arc
$m setmatrix
stroke
}bd
%%EndFile
%%BeginFile: adobe_psp_customps
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/$t Z
/$p Z
/$s Z
/$o 1. def
/2state? false def
/ps Z
level2 startnoload
/pushcolor/currentrgbcolor ld
/popcolor/setrgbcolor ld
/setcmykcolor where
{
pop/currentcmykcolor where
{
pop/pushcolor/currentcmykcolor ld
/popcolor/setcmykcolor ld
}if
}if
level2 endnoload level2 not startnoload
/pushcolor
{
currentcolorspace $c eq
{
currentcolor currentcolorspace true
}{
currentcmykcolor false
}ifelse
}bd
/popcolor
{
{
setcolorspace setcolor
}{
setcmykcolor
}ifelse
}bd
level2 not endnoload
/pushstatic
{
ps
2state?
$o
$t
$p
$s
}bd
/popstatic
{
/$s xs
/$p xs
/$t xs
/$o xs
/2state? xs
/ps xs
}bd
/pushgstate
{
save errordict/nocurrentpoint{pop 0 0}put
currentpoint
3 -1 roll restore
pushcolor
currentlinewidth
currentlinecap
currentlinejoin
currentdash exch aload length
np clippath pathbbox
$m currentmatrix aload pop
}bd
/popgstate
{
$m astore setmatrix
2 index sub exch
3 index sub exch
rC
array astore exch setdash
setlinejoin
setlinecap
lw
popcolor
np :M
}bd
/bu
{
pushgstate
gR
pushgstate
2state?
{
gR
pushgstate
}if
pushstatic
pm restore
mT concat
}bd
/bn
{
/pm save store
popstatic
popgstate
gS
popgstate
2state?
{
gS
popgstate
}if
}bd
/cpat{pop 64 div G 8{pop}repeat}bd
%%EndFile
%%BeginFile: adobe_psp_basic_text
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/S/show ld
/A{
0.0 exch ashow
}bd
/R{
0.0 exch 32 exch widthshow
}bd
/W{
0.0 3 1 roll widthshow
}bd
/J{
0.0 32 4 2 roll 0.0 exch awidthshow
}bd
/V{
0.0 4 1 roll 0.0 exch awidthshow
}bd
/fcflg true def
/fc{
fcflg{
vmstatus exch sub 50000 lt{
(%%[ Warning: Running out of memory ]%%\r)print flush/fcflg false store
}if pop
}if
}bd
/$f[1 0 0 -1 0 0]def
/:ff{$f :mf}bd
/MacEncoding StandardEncoding 256 array copy def
MacEncoding 39/quotesingle put
MacEncoding 96/grave put
/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute
/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave
/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute
/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis
/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/notequal/AE/Oslash
/infinity/plusminus/lessequal/greaterequal/yen/mu/partialdiff/summation
/product/pi/integral/ordfeminine/ordmasculine/Omega/ae/oslash
/questiondown/exclamdown/logicalnot/radical/florin/approxequal/Delta/guillemotleft
/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/lozenge
/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl
/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave
/Oacute/Ocircumflex/apple/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde
/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caron
MacEncoding 128 128 getinterval astore pop
level2 startnoload
/copyfontdict
{
findfont dup length dict
begin
{
1 index/FID ne{def}{pop pop}ifelse
}forall
}bd
level2 endnoload level2 not startnoload
/copyfontdict
{
findfont dup length dict
copy
begin
}bd
level2 not endnoload
md/fontname known not{
/fontname/customfont def
}if
/Encoding Z
/:mre
{
copyfontdict
/Encoding MacEncoding def
fontname currentdict
end
definefont :ff def
}bd
/:bsr
{
copyfontdict
/Encoding Encoding 256 array copy def
Encoding dup
}bd
/pd{put dup}bd
/:esr
{
pop pop
fontname currentdict
end
definefont :ff def
}bd
/scf
{
scalefont def
}bd
/scf-non
{
$m scale :mf setfont
}bd
/ps Z
/fz{/ps xs}bd
/sf/setfont ld
/cF/currentfont ld
/mbf
{
/makeblendedfont where
{
pop
makeblendedfont
/ABlend exch definefont
}{
pop
}ifelse
def
}def
%%EndFile
%%BeginFile: adobe_psp_derived_styles
%%Copyright: Copyright 1990-1993 Adobe Systems Incorporated. All Rights Reserved.
/wi
version(23.0)eq
{
{
gS 0 0 0 0 rC stringwidth gR
}bind
}{
/stringwidth load
}ifelse
def
/$o 1. def
/gl{$o G}bd
/ms{:M S}bd
/condensedmtx[.82 0 0 1 0 0]def
/:mc
{
condensedmtx :mf def
}bd
/extendedmtx[1.18 0 0 1 0 0]def
/:me
{
extendedmtx :mf def
}bd
/basefont Z
/basefonto Z
/dxa Z
/dxb Z
/dxc Z
/dxd Z
/dsdx2 Z
/bfproc Z
/:fbase
{
dup/FontType get 0 eq{
dup length dict begin
dup{1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse}forall
/FDepVector exch/FDepVector get[exch/:fbase load forall]def
}/bfproc load ifelse
/customfont currentdict end definefont
}bd
/:mo
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
basefont setfont
( )dup 0 4 -1 roll put
dup wi
setcharwidth
0 0 :M
gS
gl
dup show
gR
basefonto setfont
show
end
}def
}store :fbase
}bd
/:mso
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxa 1 ps div def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxa add exch
}if
setcharwidth
dup 0 0 ms
dup dxa 0 ms
dup dxa dxa ms
dup 0 dxa ms
gl
dxa 2. div dup ms
end
end
}def
}store :fbase
}bd
/:ms
{
/bfproc{
dup dup length 2 add dict
begin
{
1 index/FID ne 2 index/UniqueID ne and{def}{pop pop}ifelse
}forall
/PaintType 2 def
/StrokeWidth .012 0 FontMatrix idtransform pop def
/customfont currentdict
end
definefont
8 dict begin
/basefonto xdf
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxb .05 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dxb add
}if
exch setcharwidth
dup dxb .01 add 0 ms
0 dxb :T
gS
gl
dup 0 0 ms
gR
basefonto setfont
0 0 ms
end
end
}def
}store :fbase
}bd
/:mss
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxc 1 ps div def
/dsdx2 .05 dxc 2 div add def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
exch dup 0 ne
{
dsdx2 add
}if
exch setcharwidth
dup dsdx2 .01 add 0 ms
0 .05 dxc 2 div sub :T
dup 0 0 ms
dup dxc 0 ms
dup dxc dxc ms
dup 0 dxc ms
gl
dxc 2 div dup ms
end
end
}def
}store :fbase
}bd
/:msb
{
/bfproc{
7 dict begin
/basefont xdf
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding StandardEncoding def
/BuildChar
{
exch begin
sD begin
/dxd .03 def
basefont setfont
( )dup 0 4 -1 roll put
dup wi
1 index 0 ne
{
exch dxd add exch
}if
setcharwidth
dup 0 0 ms
dup dxd 0 ms
dup dxd dxd ms
0 dxd ms
end
end
}def
}store :fbase
}bd
/italicmtx[1 0 -.212557 1 0 0]def
/:mi
{
italicmtx :mf def
}bd
/:v
{
[exch dup/FontMatrix get exch
dup/FontInfo known
{
/FontInfo get
dup/UnderlinePosition known
{
dup/UnderlinePosition get
2 index 0
3 1 roll
transform
exch pop
}{
.1
}ifelse
3 1 roll
dup/UnderlineThickness known
{
/UnderlineThickness get
exch 0 3 1 roll
transform
exch pop
abs
}{
pop pop .067
}ifelse
}{
pop pop .1 .067
}ifelse
]
}bd
/$t Z
/$p Z
/$s Z
/:p
{
aload pop
2 index mul/$t xs
1 index mul/$p xs
.012 mul/$s xs
}bd
/:m
{gS
0 $p rm
$t lw
0 rl stroke
gR
}bd
/:n
{
gS
0 $p rm
$t lw
0 rl
gS
gl
stroke
gR
strokepath
$s lw
/setstrokeadjust where{pop
currentstrokeadjust true setstrokeadjust stroke setstrokeadjust
}{
stroke
}ifelse
gR
}bd
/:o
{gS
0 $p rm
$t 2 div dup rm
$t lw
dup 0 rl
stroke
gR
:n
}bd
%%EndFile
/currentpacking where {pop sc_oldpacking setpacking}if
end		% md
%%EndProlog
%%BeginSetup
md begin
countdictstack
[
{%stopped
%%BeginFeature: *ManualFeed False
statusdict /manualfeed false put
%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *InputSlot Cassette

%%EndFeature
}featurecleanup
countdictstack
[
{%stopped
%%BeginFeature: *PageRegion LetterSmall
lettersmall
%%EndFeature
}featurecleanup
()setjob
/pT[1 0 0 -1 31 761]def/mT[1 0 0 -1 31 761]def
initQDpatterns
/sD 16 dict def
300 level2{1 dict dup/WaitTimeout 4 -1 roll put setuserparams}{statusdict/waittimeout 3 -1 roll put}ifelse
%%IncludeFont: Helvetica-Bold
%%IncludeFont: Helvetica-BoldOblique
%%IncludeFont: Times-BoldItalic
%%IncludeFont: Times-Roman
%%IncludeFont: Times-Bold
%%IncludeFont: Times-Italic
%%IncludeFont: Symbol
%%IncludeFont: Courier
/f0_1/Helvetica-Bold :mre
/f0_24 f0_1 24 scf
/f0_18 f0_1 18 scf
/f0_14 f0_1 14 scf
/f1_1/Helvetica :mre
/f4_1/Helvetica-BoldOblique :mre
/f4_18 f4_1 18 scf
/f4_12 f4_1 12 scf
/f5_1/Times-BoldItalic :mre
/f5_12 f5_1 12 scf
/f6_1 f5_1 :ff :ms :ff def
/f6_48 f6_1 48 scf
/f7_1/Times-Roman :mre
/f7_12 f7_1 12 scf
/f7_10 f7_1 10 scf
/f7_9 f7_1 9 scf
/f7_7 f7_1 7 scf
/f8_1/Times-Bold :mre
/f8_18 f8_1 18 scf
/f8_12 f8_1 12 scf
/f9_1/Times-Italic :mre
/f9_14 f9_1 14 scf
/f9_12 f9_1 12 scf
/f10_1/Symbol :bsr
240/apple pd
:esr /f10_12 f10_1 12 scf
/f10_10 f10_1 10 scf
/f11_1 f1_1 1.04 scf
/f11_9 f11_1 9 scf
/f11_2 f11_1 2 scf
/f12_1/Courier :mre
/f12_9 f12_1 9 scf
/Courier findfont[10 0 0 -10 0 0]:mf setfont
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
initializepage
(; page: 1 of 23)setjob
%%EndPageSetup
gS 0 0 552 730 rC
199 67 :M
f0_18 sf
5.833 .583(RICE UNIVERSITY)J
77 97 :M
f4_18 sf
1.448 .145(Electrical & Computer Engineering Department)J
170 258 :M
f6_48 sf
/$o 1 def
5.719(NETSIM)A
172 296 :M
f0_24 sf
7.064 .706(Reference Manual)J
243 318 :M
f0_14 sf
3.157 .316(Version 1.0)J
241 341 :M
f0_18 sf
3.513 .351(May 1993)J
217 482 :M
.913 .091(J. Robert Jump)J
218 507 :M
f7_12 sf
-.065(ECE Dept., Rice University)A
247 519 :M
.519 .052(P.O. Box 1892)J
221 531 :M
.329 .033(Houston, TX 77251-1892)J
237 543 :M
-.158(email:  jrj@rice.edu)A
203 555 :M
(Phone:  \(713\) 527-8101 ext. 3576)S
113 651 :M
f7_10 sf
-.005(This manual describes a simulator that has not been thoroughly tested and may contain)A
113 662 :M
.27 .027(bugs.  Suggestions, criticisms, questions, or reports of any problems, errors, or bugs)J
113 673 :M
.03 .003(with the manual or the simulator are welcome and encouraged.  Please send them to J. R.)J
113 684 :M
-.058(Jump at the above address.)A
endp
%%Page: 2 2
%%BeginPageSetup
initializepage
(; page: 2 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
312 735 :M
f7_12 sf
-.668(ii)A
193 167 :M
f0_14 sf
2.312 .231(Copyright 1993 by Rice University)J
258 181 :M
3.819 .382(Houston, Texas)J
244 208 :M
2.31 .231(All Rights Reserved)J
108 256 :M
f7_12 sf
.474 .047(Permission to use, copy, modify, and distribute this software and its documentation)J
108 268 :M
.402 .04(for any research purpose and without fee is hereby granted, provided that the above)J
108 280 :M
1.238 .124(copyright notice appear in all copies and that both that copyright notice and this)J
108 292 :M
1.017 .102(permission notice appear in supporting documentation, and that the name of Rice)J
108 304 :M
.375 .037(University not be used in advertising or in publicity pertaining to distribution of the)J
108 316 :M
.179 .018(software without specific, written prior permission. The inclusion of this software or)J
108 328 :M
2.752 .275(its documentation in any commercial product without specific, written prior)J
108 340 :M
-.041(permission is prohibited.)A
108 364 :M
.819 .082(Rice University disclaims all warranties with regard to this software, including all)J
108 376 :M
-.094(implied warranties of merchantability and fitness.  In no event shall Rice University be)A
108 388 :M
.166 .017(liable for any special, indirect or consequential damages or any damages whatsoever)J
108 400 :M
-.028(resulting from loss of use, data or profits, whether in an action of contract, negligence)A
108 412 :M
-.055(or other tortious action, arising out of or in connection with this use or performance of)A
108 424 :M
.157 .016(this software.)J
289 522 :M
f0_14 sf
.63(Credits)A
108 546 :M
f7_12 sf
-.027(The NETSIM code was written by J. R. Jump and Sridhar Lakshmanamurthy.)A
endp
%%Page: 3 3
%%BeginPageSetup
initializepage
(; page: 3 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
310 735 :M
f7_12 sf
-.501(iii)A
214 86 :M
f8_18 sf
2.215 .222(TABLE OF CONTENTS)J
90 153 :M
f7_12 sf
-.123(Table of Contents)A
513 153 :M
-.501(iii)A
90 177 :M
-.021(1.  Introduction)A
516 177 :M
(1)S
117 189 :M
.01 .001(1.2.  Interconnection Networks)J
516 189 :M
(1)S
117 201 :M
.083 .008(1.2.  NETSIM, YACSIM, and PARCSIM)J
516 201 :M
(3)S
117 213 :M
.667(1.3.)A
144 213 :M
-.127(NETSIM Modules)A
516 213 :M
(3)S
117 225 :M
.142 .014(1.4.  NETSIM Packets)J
516 225 :M
(4)S
117 237 :M
-.04(1.5.  Compiling NETSIM Simulations)A
516 237 :M
(5)S
90 261 :M
-.065(2.  NETSIM Operations)A
516 261 :M
(6)S
117 273 :M
-.017(2.1.  Network Construction Operations)A
516 273 :M
(6)S
117 285 :M
.144 .014(2.2.  Network Delays)J
516 285 :M
(7)S
117 297 :M
.321 .032(2.3.  Network Thresholds)J
516 297 :M
(8)S
117 309 :M
-.028(2.4.  Packet Operations)A
516 309 :M
(9)S
117 321 :M
-.06(2.5.  Packet Synchronization Operations)A
510 321 :M
(10)S
117 333 :M
.131 .013(2.6.  Network Statistics)J
510 333 :M
(11)S
90 357 :M
-.065(3.  Example Network Simulations)A
510 357 :M
(13)S
117 369 :M
.38 .038(3.1.  Switch #1)J
510 369 :M
(13)S
117 381 :M
.38 .038(3.2.  Switch #2)J
510 381 :M
(16)S
90 405 :M
-.122(Appendix 1:  Defined Symbols)A
510 405 :M
(18)S
90 429 :M
-.123(Appendix 2: Summary of Operations)A
510 429 :M
(19)S
90 453 :M
-.195(Appendix 3:  Alphabetical Operation List)A
510 453 :M
(20)S
endp
%%Page: 4 4
%%BeginPageSetup
initializepage
(; page: 4 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
551 739 :M
f5_12 sf
(1)S
226 86 :M
f8_18 sf
3.005 .3(1.  INTRODUCTION)J
72 129 :M
f7_12 sf
-.11(This manual describes a general-purpose interconnection network simulator called NETSIM.  It can be)A
72 141 :M
-.099(used to construct and simulate a wide range of network models, including both direct and indirect)A
72 153 :M
-.091(networks.  A distinctive characteristics of NETSIM is that it is modular, allowing the user to specify)A
72 165 :M
-.084(virtually any network structure by connecting together a number of network building blocks.  It is)A
72 177 :M
-.078(designed to simulate large networks that use modern routing techniques, such as worm-hole and)A
72 189 :M
-.07(virtual-cut-through routing, but can also simulate networks that use store-and-forward routing.  It can)A
72 201 :M
-.128(be used as a component of a simulation testbed capable of simulating a full parallel system that is)A
72 213 :M
-.102(driven by the execution of real programs.  Alternatively, it can be used in a stand alone mode where)A
72 225 :M
-.091(packets are generated randomly and sent through the network.  In this last case the goal is usually to)A
72 237 :M
-.146(characterize the network statistically.)A
72 261 :M
f8_12 sf
3.164 .316(1.2.  INTERCONNECTION NETWORKS)J
72 285 :M
f7_12 sf
-.077(This sections provides a brief review of interconnection networks.  It describes the basic concepts of)A
72 297 :M
-.062(interconnection networks including switch structure, network structure, and routing techniques.)A
72 321 :M
-.105(The purpose of an interconnection network is to provide communication paths between the modules of)A
72 333 :M
-.092(a parallel system.  The simplest example is a bus, which provides a single path that all modules must)A
72 345 :M
-.044(share.  It is usually the most inexpensive type of network, but also one of the slowest, since only one)A
72 357 :M
-.119(module can send data at a time.  At the other extreme is the crossbar network that provides a direct)A
72 369 :M
-.121(connection between every pair of modules in the system.  While it can provide more communication)A
72 381 :M
-.063(bandwidth than most other types of networks, it is also the most expensive, since it requires on the)A
72 393 :M
-.065(order of N)A
f7_7 sf
0 -3 rm
(2)S
0 3 rm
f7_12 sf
-.065( links to connect N modules.  In between these two extremes are many other network)A
72 405 :M
-.097(structures that provide a wide range of tradeoffs between performance and cost.  They provide multiple)A
72 417 :M
-.087(parallel communication paths but require some sharing of links, and paths in these networks may use)A
72 429 :M
-.073(more than one link.)A
72 453 :M
-.075(Interconnection networks are usually constructed from switches and links.  A )A
f9_12 sf
-.079(switch)A
f7_12 sf
-.076( is a device with)A
72 465 :M
-.132(one or more input terminals and one or more output terminals that can route data selectively from input)A
72 477 :M
-.092(terminals to output terminals.  )A
f9_12 sf
-.104(Links)A
f7_12 sf
-.102( are communication channels used to connect switch output)A
72 489 :M
-.098(terminals to the input terminals of other switches.)A
72 513 :M
-.086(A common choice for  the internal organization of a switch is a crossbar.  This type of switch can pass)A
72 525 :M
-.12(data through several terminals at the same time as long as none of them are sending to the same output)A
72 537 :M
-.125(terminal.  The choice of which output terminal to use is made by a local controller inside the switch that)A
72 549 :M
-.124(uses information from the incoming data to make the selection.  In the event that data at two input)A
72 561 :M
-.141(terminals are routed to the same output terminal at the same time, the switch must make a choice to)A
72 573 :M
-.093(transfer the data from one of the terminals and block the other.  This is a source of contention or)A
72 585 :M
-.112(conflict in the network and can be a major restriction on its performance.)A
72 609 :M
-.097(It is also common for networks to contain buffers for temporarily holding data that is blocked waiting)A
72 621 :M
-.08(for a free output terminal.  These buffers can be inserted in various ways into the switches or in the)A
72 633 :M
-.059(links.  Networks with buffers can hold blocked data at the switch where a conflict occurred.  If buffers)A
72 645 :M
-.099(are not used and there is a conflict for an output terminal of a switch, the transfer from the input)A
72 657 :M
-.116(terminal that is not chosen is usually aborted, and the source module that initiated the transfer tries)A
72 669 :M
(again.)S
72 693 :M
-.083(There are two major categories of interconnection networks, )A
f9_12 sf
-.084(direct networks)A
f7_12 sf
-.08( and )A
f9_12 sf
-.084(indirect networks)A
f7_12 sf
(.)S
72 705 :M
-.102(Direct networks have one switch associated with each module to be connected.  Each switch has one)A
72 717 :M
-.132(terminal and link used to connect it to the module and one or more terminals with links to connect it)A
endp
%%Page: 5 5
%%BeginPageSetup
initializepage
(; page: 5 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
72 59 :M
f4_12 sf
.548(Introduction)A
550 59 :M
(2)S
70 63 -1 1 560 62 1 70 62 @a
72 81 :M
f7_12 sf
-.079(directly to other switches in the network.  The network used to interconnect the processors of a)A
72 93 :M
-.08(hypercube multicomputer is an example of a direct network.  Fig. 1. illustrates an 8-node hypercube)A
72 105 :M
-.078(organization.  Note that the number of links that must be used to pass data from one processor to)A
72 117 :M
-.047(another is different for different pairs of processors.  Some pairs are adjacent in the network \(i.e.,)A
72 129 :M
-.087(share a link\), and can communicate by passing data through only one link.  Other pairs can only)A
72 141 :M
-.086(communicate through paths of several links.)A
:a
36 <3049883AB59CF039
><3030304949498888883A3A3AB5B5B59C9C9CF0F0F0393939
>fg null :b
226 180 177 87 rC
0 <FFFFFFFFFFFFFFFF
><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>fg null :b
-864 -1174 :M
%%DSIDICT:_cv
currentdict /bu known {bu}if
userdict /_cv known not{userdict /_cv 30 dict put}if
_cv begin
/bdf{bind def}bind def
currentscreen/cs exch def/ca exch def/cf exch def
systemdict/setcmykcolor known{/cvcmyk /setcmykcolor load def}{/cvcmyk{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll}repeat setrgbcolor pop}bdf}ifelse
/ss{//cf //ca //cs setscreen}bdf
/stg{ss setgray}bdf
/strgb{ss setrgbcolor}bdf
/stcmyk{ss cvcmyk}bdf
/min1{dup 0 eq{pop 1}if}bdf
end
currentdict /bn known {bn}if
:e
0 G
245 183 7 7 rF
245.5 183.5 6 6 rS
292 183 7 7 rF
292.5 183.5 6 6 rS
245 230 7 7 rF
245.5 230.5 6 6 rS
251 187 -1 1 293 186 1 251 186 @a
292 230 7 7 rF
292.5 230.5 6 6 rS
251 234 -1 1 293 233 1 251 233 @a
-1 -1 249 231 1 1 248 189 @b
-1 -1 296 231 1 1 295 189 @b
271 209 6 7 rF
271.5 209.5 5 6 rS
318 209 6 7 rF
318.5 209.5 5 6 rS
271 256 6 7 rF
271.5 256.5 5 6 rS
276 213 -1 1 319 212 1 276 212 @a
318 256 6 7 rF
318.5 256.5 5 6 rS
276 260 -1 1 319 259 1 276 259 @a
-1 -1 275 257 1 1 274 215 @b
-1 -1 322 257 1 1 321 215 @b
251 190 -1 1 272 209 1 251 189 @a
298 190 -1 1 319 209 1 298 189 @a
251 237 -1 1 272 256 1 251 236 @a
298 237 -1 1 319 256 1 298 236 @a
.5 G
318 256 :M
0.500  _cv begin stg end
318 256 :M
0.500  _cv begin stg end
258.5 212.5 7.5 @i
0 G
258.5 212.5 7 @e
.5 G
318 256 :M
0.500  _cv begin stg end
318 256 :M
0.500  _cv begin stg end
0 G
265 213 -1 1 272 212 1 265 212 @a
.5 G
265 212 :M
0.500  _cv begin stg end
265 212 :M
0.500  _cv begin stg end
233 187 7 @i
0 G
233 187 6.5 @e
239 187 -1 1 246 186 1 239 186 @a
.5 G
239 186 :M
0.500  _cv begin stg end
239 186 :M
0.500  _cv begin stg end
233 234 7 @i
0 G
233 234 6.5 @e
239 234 -1 1 246 233 1 239 233 @a
.5 G
239 233 :M
0.500  _cv begin stg end
239 233 :M
0.500  _cv begin stg end
258.5 259.5 7.5 @i
0 G
258.5 259.5 7 @e
265 260 -1 1 272 259 1 265 259 @a
.5 G
265 259 :M
0.500  _cv begin stg end
265 259 :M
0.500  _cv begin stg end
15 14 311.5 187 @j
0 G
14 13 311.5 187 @f
298 187 -1 1 305 186 1 298 186 @a
.5 G
304 186 :M
0.500  _cv begin stg end
304 186 :M
0.500  _cv begin stg end
336.5 212.5 7.5 @i
0 G
336.5 212.5 7 @e
323 213 -1 1 330 212 1 323 212 @a
.5 G
329 212 :M
0.500  _cv begin stg end
329 212 :M
0.500  _cv begin stg end
15 14 311.5 234 @j
0 G
14 13 311.5 234 @f
298 234 -1 1 305 233 1 298 233 @a
.5 G
304 233 :M
0.500  _cv begin stg end
304 233 :M
0.500  _cv begin stg end
336.5 259.5 7.5 @i
0 G
336.5 259.5 7 @e
323 260 -1 1 330 259 1 323 259 @a
353 202 7 7 rF
353.5 202.5 6 6 rS
.5 G
329 259 :M
0.500  _cv begin stg end
329 259 :M
0.500  _cv begin stg end
357 223 7 @i
0 G
357 223 6.5 @e
369 208 :M
f7_9 sf
-.199(Switch)A
369 226 :M
-.123(Processor)A
351 241 -1 1 364 240 1 351 240 @a
369 243 :M
-.333(Link)A
gR
gS 31 31 552 730 rC
206 288 :M
f7_12 sf
.043 .004(Fig. 1.  8-Node Direct Network \(Hypercube\).)J
72 312 :M
-.064(In an indirect network, some switches are connected to modules, but some are not.  That is, in addition)A
72 324 :M
-.091(to the switches that connect to both modules and other switches, there are also switches that only)A
72 336 :M
-.089(connect to other switches.  Usually the switches in an indirect network are connected into stages as)A
72 348 :M
-.075(shown in Fig. 2.  This type of network is called a )A
f9_12 sf
-.08(multistage interconnection network)A
f7_12 sf
-.076(.  Data enters the)A
72 360 :M
-.078(network by moving from a module into a switch in stage 1.  Then it proceeds to move from switches)A
72 372 :M
-.082(in one stage to switches in the next stage until it reaches the other side of the network.   In networks)A
72 384 :M
-.025(with a regular structure, such as the one shown in Fig. 2, all data must pass through every stage, so)A
72 396 :M
-.092(that all packets pass through the same number of switches before reaching their destinations.)A
:a
36 <3049883AB59CF039
><3030304949498888883A3A3AB5B5B59C9C9CF0F0F0393939
>fg null :b
201 435 228 128 rC
0 <FFFFFFFFFFFFFFFF
><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>fg null :b
-694 -495 :M
%%DSIDICT:_cv
currentdict /bu known {bu}if
userdict /_cv known not{userdict /_cv 30 dict put}if
_cv begin
/bdf{bind def}bind def
currentscreen/cs exch def/ca exch def/cf exch def
systemdict/setcmykcolor known{/cvcmyk /setcmykcolor load def}{/cvcmyk{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll}repeat setrgbcolor pop}bdf}ifelse
/ss{//cf //ca //cs setscreen}bdf
/stg{ss setgray}bdf
/strgb{ss setrgbcolor}bdf
/stcmyk{ss cvcmyk}bdf
/min1{dup 0 eq{pop 1}if}bdf
end
currentdict /bn known {bn}if
:e
0 G
228 540 -1 1 256 539 1 228 539 @a
244 528 -1 1 256 527 1 244 527 @a
256 528 -1 1 260 531 1 256 527 @a
-1 -1 257 540 1 1 259 535 @b
260 529 8 9 rF
260.5 529.5 7 8 rS
256 505 -1 1 260 508 1 256 504 @a
-1 -1 257 516 1 1 259 511 @b
260 506 8 9 rF
260.5 506.5 7 8 rS
256 481 -1 1 260 484 1 256 480 @a
-1 -1 257 492 1 1 259 487 @b
260 482 8 9 rF
260.5 482.5 7 8 rS
256 458 -1 1 260 461 1 256 457 @a
-1 -1 257 469 1 1 259 464 @b
260 459 8 9 rF
260.5 459.5 7 8 rS
.5 G
259 464 :M
0.500  _cv begin stg end
259 464 :M
0.500  _cv begin stg end
12 13 238 504.5 @j
0 G
11 12 238 504.5 @f
.5 G
259 464 :M
0.500  _cv begin stg end
259 464 :M
0.500  _cv begin stg end
12 13 238 528.5 @j
0 G
11 12 238 528.5 @f
.5 G
259 464 :M
0.500  _cv begin stg end
259 464 :M
0.500  _cv begin stg end
12 13 223 539.5 @j
0 G
11 12 223 539.5 @f
244 505 -1 1 256 504 1 244 504 @a
228 516 -1 1 256 515 1 228 515 @a
201 505 -1 1 233 504 1 201 504 @a
209 528 -1 1 232 527 1 209 527 @a
205 516 -1 1 217 515 1 205 515 @a
213 540 -1 1 217 539 1 213 539 @a
-1 -1 214 551 1 1 213 538 @b
-1 -1 210 555 1 1 209 527 @b
-1 -1 206 559 1 1 205 515 @b
-1 -1 202 563 1 1 201 503 @b
.5 G
201 562 :M
0.500  _cv begin stg end
201 562 :M
0.500  _cv begin stg end
12 13 223 516.5 @j
0 G
11 12 223 516.5 @f
213 551 -1 1 341 550 1 213 550 @a
209 555 -1 1 346 554 1 209 554 @a
206 559 -1 1 349 558 1 206 558 @a
201 563 -1 1 352 562 1 201 562 @a
228 493 -1 1 256 492 1 228 492 @a
244 481 -1 1 256 480 1 244 480 @a
.5 G
255 480 :M
0.500  _cv begin stg end
255 480 :M
0.500  _cv begin stg end
12 13 238 457.5 @j
0 G
11 12 238 457.5 @f
.5 G
255 480 :M
0.500  _cv begin stg end
255 480 :M
0.500  _cv begin stg end
12 13 238 480.5 @j
0 G
11 12 238 480.5 @f
.5 G
255 480 :M
0.500  _cv begin stg end
255 480 :M
0.500  _cv begin stg end
12 13 223 492.5 @j
0 G
11 12 223 492.5 @f
244 458 -1 1 256 457 1 244 457 @a
228 470 -1 1 256 469 1 228 469 @a
212 458 -1 1 232 457 1 212 457 @a
205 481 -1 1 232 480 1 205 480 @a
209 470 -1 1 217 469 1 209 469 @a
201 493 -1 1 217 492 1 201 492 @a
-1 -1 213 458 1 1 212 447 @b
-1 -1 210 469 1 1 209 443 @b
-1 -1 206 480 1 1 205 439 @b
-1 -1 202 492 1 1 201 435 @b
.5 G
201 435 :M
0.500  _cv begin stg end
201 435 :M
0.500  _cv begin stg end
12 13 223 469.5 @j
0 G
11 12 223 469.5 @f
212 448 -1 1 341 447 1 212 447 @a
210 444 -1 1 345 443 1 210 443 @a
205 440 -1 1 349 439 1 205 439 @a
201 436 -1 1 352 435 1 201 435 @a
-1 -1 331 532 1 1 333 527 @b
330 536 -1 1 334 539 1 330 535 @a
323 529 8 9 rF
323.5 529.5 7 8 rS
-1 -1 332 509 1 1 335 503 @b
330 512 -1 1 335 515 1 330 511 @a
323 506 8 9 rF
323.5 506.5 7 8 rS
-1 -1 331 485 1 1 333 480 @b
330 489 -1 1 334 492 1 330 488 @a
323 483 8 9 rF
323.5 483.5 7 8 rS
-1 -1 331 462 1 1 333 457 @b
330 465 -1 1 334 468 1 330 464 @a
323 459 8 9 rF
323.5 459.5 7 8 rS
291 529 8 9 rF
291.5 529.5 7 8 rS
291 506 8 9 rF
291.5 506.5 7 8 rS
291 483 8 9 rF
291.5 483.5 7 8 rS
291 459 8 9 rF
291.5 459.5 7 8 rS
267 462 -1 1 291 461 1 267 461 @a
267 465 -1 1 291 484 1 267 464 @a
269 483 -1 1 292 507 1 269 482 @a
269 488 -1 1 292 531 1 269 487 @a
267 536 -1 1 291 535 1 267 535 @a
-1 -1 268 533 1 1 290 512 @b
-1 -1 268 513 1 1 290 488 @b
-1 -1 268 509 1 1 290 464 @b
299 462 -1 1 323 461 1 299 461 @a
298 465 -1 1 323 484 1 298 464 @a
298 485 -1 1 323 508 1 298 484 @a
298 489 -1 1 323 532 1 298 488 @a
299 536 -1 1 323 535 1 299 535 @a
-1 -1 299 533 1 1 322 512 @b
-1 -1 299 513 1 1 322 488 @b
-1 -1 299 509 1 1 322 464 @b
335 458 -1 1 341 457 1 335 457 @a
-1 -1 342 458 1 1 341 447 @b
-1 -1 346 469 1 1 345 443 @b
335 469 -1 1 345 468 1 335 468 @a
-1 -1 350 481 1 1 349 439 @b
335 481 -1 1 349 480 1 335 480 @a
-1 -1 353 492 1 1 352 435 @b
334 493 -1 1 353 492 1 334 492 @a
335 540 -1 1 341 539 1 335 539 @a
-1 -1 342 551 1 1 341 539 @b
-1 -1 346 555 1 1 345 527 @b
334 528 -1 1 345 527 1 334 527 @a
-1 -1 349 559 1 1 348 515 @b
335 516 -1 1 349 515 1 335 515 @a
-1 -1 353 563 1 1 352 503 @b
336 505 -1 1 352 504 1 336 504 @a
249 548 :M
f7_9 sf
-.124(Stage 1)A
280 548 :M
-.124(Stage 2)A
313 548 :M
-.124(Stage 3)A
371 460 9 10 rF
371.5 460.5 8 9 rS
.5 G
340 548 :M
0.500  _cv begin stg end
340 548 :M
0.500  _cv begin stg end
375.5 492.5 10.5 @i
0 G
375.5 492.5 10 @e
395 468 :M
-.199(Switch)A
395 495 :M
-.123(Processor)A
369 522 -1 1 387 521 1 369 521 @a
395 524 :M
-.333(Link)A
gR
gS 31 31 552 730 rC
192 584 :M
f7_12 sf
.038 .004(Fig. 2.  8-Node Indirect Network \(Perfect Shuffle\).)J
72 608 :M
-.147(A )A
f9_12 sf
-.125(routing protocol)A
f7_12 sf
-.125( is a mechanism for controlling the movement of data through the switches and links)A
72 620 :M
-.082(of a network  In most routing protocols, data is organized into packets consisting of several smaller)A
72 632 :M
-.104(units of data called )A
f9_12 sf
-.084(flits)A
f7_12 sf
-.108(.  A flit is the smallest unit of data that can be transferred between two switches)A
72 644 :M
-.093(in a single cycle.  It has a fixed size determined by the number of wires in the link.  The first flit, called)A
72 656 :M
-.093(the )A
f9_12 sf
-.09(head flit,)A
f7_12 sf
-.1( of a packet contains routing information used by the switches to select output terminals.)A
72 668 :M
-.09(When a packet moves through a network, its head flit goes first and establishes a path by selecting)A
72 680 :M
-.093(output terminals of the switches it passes through.  The flits that follow the head flit do not contain)A
72 692 :M
-.113(routing information and must follow the path established by the head.  The last flit of a packet is called)A
72 704 :M
-.11(the )A
f9_12 sf
-.1(tail)A
f7_12 sf
-.118( of the packet, and it tears down the path by freeing each switch output terminal it passes)A
72 716 :M
.096(through.)A
endp
%%Page: 6 6
%%BeginPageSetup
initializepage
(; page: 6 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
72 59 :M
f4_12 sf
.548(Introduction)A
550 59 :M
(3)S
70 63 -1 1 560 62 1 70 62 @a
72 81 :M
f7_12 sf
-.115(Since only one flit can pass through a link at a time, the flits of a packet can become distributed over)A
72 93 :M
-.083(several buffers.  There are two common routing protocols distinguished by the way the flits of a packet)A
72 105 :M
-.088(can be spread over buffers in the network.  The first routing protocol is called )A
f9_12 sf
-.105(store-and-forward)A
72 117 :M
-.119(routing)A
f7_12 sf
-.108(, because it moves all of the flits into a buffer before it moves any flits of the packet out of the)A
72 129 :M
-.054(buffer.  In store-and-forward routing the flits of a packet are spread over at most two buffers.  The)A
72 141 :M
-.123(second routing protocol is characterized by the property that the head and following flits can leave a)A
72 153 :M
-.114(buffer as soon as they have a free output terminal and space available in the next buffer; the head does)A
72 165 :M
-.121(not need to wait until its tail flit catches up before it moves to the next buffer.  The flits of a packet can)A
72 177 :M
-.09(become spread out over several buffers in the network.  This type of routing has been characterized in)A
72 189 :M
-.076(two ways.  If each switch has enough buffer space to hold an entire packet and a head flit does not)A
72 201 :M
-.104(start to move into a new buffer until there is enough free space in that buffer to hold an entire packet,)A
72 213 :M
-.111(the routing protocol is called )A
f9_12 sf
-.119(virtual-cut-through routing)A
f7_12 sf
-.113(.  If the head flit can start moving as soon as)A
72 225 :M
-.09(there is at least one free flit position in the next buffer, the protocol is called )A
f9_12 sf
-.11(worm-hole routing)A
f7_12 sf
-.098(.  In)A
72 237 :M
-.08(some definitions of worm-hole routing the amount of buffer space is assumed to be small, frequently)A
72 249 :M
(one or two flits.)S
72 273 :M
f8_12 sf
3.053 .305(1.2.  NETSIM, YACSIM, AND PARCSIM)J
72 297 :M
f7_12 sf
-.094(NETSIM is an extension of the discrete event simulator YACSIM.  Therefore, the user must be)A
72 309 :M
-.092(familiar with YACSIM in order to use NETSIM.  This manual only discusses the NETSIM)A
72 321 :M
-.108(extensions.  The user should consult the YACSIM Reference Manual for a description of YACSIM)A
72 333 :M
-.059(objects and operations.)A
72 357 :M
-.111(NETSIM and YACSIM are implemented by providing a set of data structures and subroutines in the C)A
72 369 :M
-.079(programming language.  Therefore, to write a NETSIM simulation, one writes a C program that)A
72 381 :M
-.115(declares NETSIM and YACSIM objects and calls the subroutines provided to manipulate these objects.)A
72 393 :M
-.125(The instructions for running a NETSIM simulation are exactly the same as for a YACSIM simulation)A
72 405 :M
-.149(and are given in the YACSIM Reference Manual.)A
72 429 :M
-.137(NETSIM is an integral part of a parallel architecture simulator called PARCSIM, although the full)A
72 441 :M
-.057(structure of PARCSIM need not be used to simulate networks.  PARCSIM adds processor and)A
72 453 :M
-.08(memory modules, as well as the NETSIM capability, to YACSIM.  This allows the user to specify a)A
72 465 :M
-.074(complete parallel system with processors, memory modules, and an interconnection network.)A
72 477 :M
-.083(PARCSIM along with a number of profilers constitute the Rice Parallel Processing Testbed \(RPPT\).)A
72 489 :M
-.118(The profilers are used to instrument a parallel program whose execution on a parallel system can then)A
72 501 :M
-.075(be simulated with PARCSIM.  In this way, interconnection networks can be studied with packets)A
72 513 :M
-.123(generated by the execution of real programs.  Alternatively, NETSIM alone can simulate)A
72 525 :M
-.096(interconnection networks with the packets generated by a random process as has been done in many)A
72 537 :M
.135 .014(previous studies.)J
72 561 :M
f8_12 sf
2(1.3.)A
108 561 :M
2.608 .261(NETSIM MODULES)J
72 585 :M
f7_12 sf
-.076(While an m)A
f10_10 sf
-.075(\264)A
f7_12 sf
-.065(n switch was seen as a basic building block in Section 1.1, there are several ways to)A
72 597 :M
-.139(implement switches, and different implementation choices can have a significant effect on the)A
72 609 :M
-.1(performance of a network.  Therefore, the choice of switch implementation is an important design)A
72 621 :M
-.101(parameter and one we might want to investigate using NETSIM.  To avoid providing a large number)A
72 633 :M
-.083(switch types as basic NETSIM modules, and because we can not predict all types of switches that)A
72 645 :M
-.094(might be useful, NETSIM provides modules that are more primitive than switches and from which a)A
72 657 :M
-.071(large variety of switches can be constructed.  NETSIM provides two such modules, multiplexers and)A
72 669 :M
-.075(demultiplexers, that along with buffers are sufficient to construct most switch and networks of interest.)A
endp
%%Page: 7 7
%%BeginPageSetup
initializepage
(; page: 7 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
72 59 :M
f4_12 sf
.548(Introduction)A
550 59 :M
(4)S
70 63 -1 1 560 62 1 70 62 @a
72 81 :M
f7_12 sf
-.111(The basic NETSIM modules are described below:)A
90 105 :M
f8_12 sf
-.009(Multiplexers:  )A
f7_12 sf
-.009(These are multi-input, single-output modules used to merge data.  A multiplexer)A
90 117 :M
-.11(is the module that resolves conflict when two of its input terminals have data to transfer to its)A
90 129 :M
-.136(output terminal at the same time.  This arbitration is currently implemented as a semaphore with a)A
90 141 :M
-.057(FIFO queuing discipline.)A
90 165 :M
f8_12 sf
.059 .006(Demultiplexers: )J
f7_12 sf
.034 .003( These are single-input, multi-output modules used to route data along one of)J
90 177 :M
-.092(several paths.  This module is the one that implements the routing mechanism of a network.  It)A
90 189 :M
-.131(uses data in the head flit of a packet at its input terminal to select which one of its output terminals)A
90 201 :M
-.087(the packet will pass through.  The user can specify the routing algorithm used to make this choice.)A
90 225 :M
f8_12 sf
-.016(Buffers: )A
f7_12 sf
-.016( These are modules used to provide temporary storage for flits as they move through a)A
90 237 :M
-.089(network.  They are currently implemented as finite FIFO queues.  The user can specify the)A
90 249 :M
-.088(maximum number of flits a buffer can hold.)A
90 273 :M
f8_12 sf
.061 .006(Network Ports:)J
f7_12 sf
.036 .004(  These are single-input, single-output modules used as interface units between a)J
90 285 :M
.006 .001(network and its external environment.  There are two types of network ports.  )J
f8_12 sf
(Input ports)S
90 297 :M
f7_12 sf
-.093(provide an interface through which packets are passed into the network, and packets are removed)A
90 309 :M
.475 .048(from the network through )J
f8_12 sf
.706 .071(output ports)J
f7_12 sf
(.)S
72 333 :M
-.056(Symbols that can be used to represent these modules in a network diagram are shown in Fig. 3.)A
:a
32 <E1C3870F1E3C78F0
><E1E1E1C3C3C38787870F0F0F1E1E1E3C3C3C787878F0F0F0
>fg null :b
0 0 0 0 rC
:e
43 284 :M
0 G
f11_2 sf
(.)S
gR
:a
32 <E1C3870F1E3C78F0
><E1E1E1C3C3C38787870F0F0F1E1E1E3C3C3C787878F0F0F0
>fg null :b
gS 232 348 166 84 rC
36 <3049883AB59CF039
><3030304949498888883A3A3AB5B5B59C9C9CF0F0F0393939
>fg null :b
0 <FFFFFFFFFFFFFFFF
><FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
>fg null :b
44 284 :M
%%DSIDICT:_cv
currentdict /bu known {bu}if
userdict /_cv known not{userdict /_cv 30 dict put}if
_cv begin
/bdf{bind def}bind def
currentscreen/cs exch def/ca exch def/cf exch def
systemdict/setcmykcolor known{/cvcmyk /setcmykcolor load def}{/cvcmyk{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll}repeat setrgbcolor pop}bdf}ifelse
/ss{//cf //ca //cs setscreen}bdf
/stg{ss setgray}bdf
/strgb{ss setrgbcolor}bdf
/stcmyk{ss cvcmyk}bdf
/min1{dup 0 eq{pop 1}if}bdf
end
currentdict /bn known {bn}if
:e
1 G
244 400 37 17 rF
0 G
244.5 400.5 36 16 rS
249 428 :M
f7_9 sf
-.096(Buffer)A
232 409 -1 1 245 408 1 232 408 @a
280 409 -1 1 293 408 1 280 408 @a
280 408 :M
psb
pse
1 G
np 279 372 :M
279 348 :L
295 360 :L
279 372 :L
:K
eofill
0 G
-1 -1 280 373 1 1 279 348 @b
279 349 -1 1 296 360 1 279 348 @a
-1 -1 280 373 1 1 295 360 @b
267 353 -1 1 280 352 1 267 352 @a
267 369 -1 1 280 368 1 267 368 @a
295 361 -1 1 308 360 1 295 360 @a
gR
:e
0 G
gS 0 0 552 730 rC
gS
274.25 364.75 :T
90 rotate
-274.25 -364.75 :T
267 369 :M
f11_9 sf
(...)S
gR
232 348 166 84 rC
264 384 :M
f7_9 sf
-.049(Multiplexer)A
306 384 :M
psb
pse
1 G
np 351 372 :M
351 348 :L
335 360 :L
351 372 :L
:K
eofill
0 G
-1 -1 352 373 1 1 351 348 @b
-1 -1 336 361 1 1 351 348 @b
335 361 -1 1 352 372 1 335 360 @a
351 353 -1 1 364 352 1 351 352 @a
351 369 -1 1 364 368 1 351 368 @a
323 361 -1 1 336 360 1 323 360 @a
gR
gS 0 0 552 730 rC
gS
354.125 356.75 :T
270 rotate
-354.125 -356.75 :T
347 361 :M
f11_9 sf
(...)S
gR
232 348 166 84 rC
317 384 :M
f7_9 sf
-.082(Demultiplexer)A
382 405 -1 1 387 408 1 382 404 @a
-1 -1 379 417 1 1 386 408 @b
378 401 -1 1 383 404 1 378 400 @a
362 401 -1 1 379 400 1 362 400 @a
-1 -1 363 417 1 1 362 400 @b
362 417 -1 1 379 416 1 362 416 @a
355 428 :M
-.025(Output Port)A
354 409 -1 1 363 408 1 354 408 @a
386 409 -1 1 395 408 1 386 408 @a
-1 -1 307 409 1 1 310 404 @b
306 409 -1 1 315 416 1 306 408 @a
-1 -1 311 405 1 1 314 400 @b
314 401 -1 1 331 400 1 314 400 @a
-1 -1 331 417 1 1 330 400 @b
314 417 -1 1 331 416 1 314 416 @a
300 428 :M
-.027(Input Port)A
298 409 -1 1 307 408 1 298 408 @a
330 409 -1 1 339 408 1 330 408 @a
gR
gS 31 31 552 730 rC
216 453 :M
f7_12 sf
.106 .011(Fig. 3.  Basic Network Module Symbols.)J
72 477 :M
-.101(To build a simulation model for a network, the user creates the modules by calling NETSIM routines)A
72 489 :M
-.09(that allocate descriptors for the modules and return pointers to those descriptors.  To connect two)A
72 501 :M
-.057(modules, the user calls a connection routine with pointers to the modules' descriptors as arguments.)A
72 513 :M
-.132(An output terminal of any of the modules except an output port can be connected to an input terminal of)A
72 525 :M
-.095(any module except an input port.)A
72 549 :M
f8_12 sf
3.06 .306(1.4.  NETSIM PACKETS)J
72 573 :M
f7_12 sf
-.095(Data is sent through a network in the form of packets consisting of several flits.  Each packet contains)A
72 585 :M
-.071(routing information used by the network's demultiplexers to route it through the network.  There are)A
72 597 :M
-.081(NETSIM operations for creating packets, putting them into a network through an input port, and)A
72 609 :M
-.111(removing them from the network through an output port.  The simulator automatically measures the)A
72 621 :M
-.094(time each packet spends in the network.)A
72 645 :M
-.12(In PARCSIM simulations, packets may be part of a larger data unit called a message.  To facilitate the)A
72 657 :M
-.07(simulation of messages, each packet provides a link back to the message to which it belongs.  This,)A
72 669 :M
-.089(along with sequence numbers that can be assigned to packets, can be used by routines external to)A
72 681 :M
-.081(NETSIM to decompose messages into packets before transmission through a network and to)A
72 693 :M
-.095(reassemble received packets into messages.)A
endp
%%Page: 8 8
%%BeginPageSetup
initializepage
(; page: 8 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
72 59 :M
f4_12 sf
.548(Introduction)A
550 59 :M
(5)S
70 63 -1 1 560 62 1 70 62 @a
72 81 :M
f7_12 sf
-.114(Each packet is implemented by two YACSIM events, one for the front end or head of the packet and)A
72 93 :M
-.112(one for the rear end or tail of the packet.  The event for the head of the packet establishes a path)A
72 105 :M
-.1(through the network using the routing functions of the demultiplexers and routing information in the)A
72 117 :M
-.104(packet.  The event for the tail of the packet manages the distribution of flits between a packet's head)A
72 129 :M
-.093(and tail, and follows the path established by the head event.  The creation and scheduling of these)A
72 141 :M
-.095(events is done automatically when a packet is sent into the network.  They terminate when the packet's)A
72 153 :M
-.106(flits reach their destination port.)A
72 177 :M
f8_12 sf
2.924 .292(1.5.  COMPILING NETSIM SIMULATIONS)J
72 201 :M
f7_12 sf
-.07(To compile a simulation program under the UNIX operating system, you need access to two files,)A
72 213 :M
f9_12 sf
-.041(sim.h)A
f7_12 sf
-.038( and )A
f9_12 sf
-.041(netsim.o)A
f7_12 sf
-.033(.  The file )A
f9_12 sf
-.041(sim.h)A
f7_12 sf
-.038( should be included in all the files that make up your program.  It)A
72 225 :M
-.1(contains useful pre-defined symbols, declarations of all the YACSIM and NETSIM operations)A
72 237 :M
-.089(available to the user, and definitions of the simulation object types.  The file )A
f9_12 sf
-.094(netsim.o )A
f7_12 sf
-.09(is the library of)A
72 249 :M
-.113(all YACSIM and NETSIM operations.)A
72 273 :M
-.12(To compile a simulation program, use a command line of the form:)A
108 300 :M
f9_14 sf
.811 .081(cc "your options for the compiler" "your files" netsim.o)J
72 324 :M
f7_12 sf
-.05(You may include any options you want for the C compiler such as -g, -o, etc.  To use this command,)A
72 336 :M
-.074(you must put )A
f9_12 sf
-.075(sim.h)A
f7_12 sf
-.069( and )A
f9_12 sf
-.074(netsim.o)A
f7_12 sf
-.073( where the compiler can find them, for example in the same directory)A
72 348 :M
-.071(as the source code for the simulation program, or use full path names for them.)A
72 372 :M
-.14(An alternative way to compile a simulation program is to use a command line of the form:)A
108 399 :M
f9_14 sf
.864 .086(netsim "your options for the compiler" "your files")J
72 423 :M
f7_12 sf
-.058(To use this form, both sim.h and netsim.o, along with the command file netsim, must all be in the)A
72 435 :M
-.098(same directory, and that directory must have been passed to the command program netsim when it was)A
72 447 :M
-.079(compiled.  The full name of this directory must be on your search path.)A
endp
%%Page: 9 9
%%BeginPageSetup
initializepage
(; page: 9 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
550 744 :M
f4_12 sf
(6)S
200 86 :M
f8_18 sf
2.599 .26(2.  NETSIM OPERATIONS)J
72 129 :M
f7_12 sf
-.06(This section describes of NETSIM's user operations.  Since NETSIM is an extension of YACSIM all)A
72 141 :M
-.095(of these operations must be called from within YACSIM programs.)A
72 165 :M
f8_12 sf
2.852 .285(2.1.  NETWORK CONSTRUCTION OPERATIONS)J
72 189 :M
f7_12 sf
-.098(These are the operations used to create and interconnect network modules.  For each of the five types)A
72 201 :M
-.09(of modules, there is an operation for constructing an instance of that module.  There is also a general)A
72 213 :M
-.118(operation for connecting an output terminal of one module to an input terminal of another.)A
72 237 :M
f9_12 sf
.88 .088(BUFFER *NewBuffer\(id, size\))J
72 249 :M
-.222(int    id;)A
72 261 :M
-.15(int    size;)A
90 279 :M
f7_12 sf
.084 .008(This operation creates and returns a pointer to a new network buffer.  It assigns the buffer the)J
-1 -1 73 282 1 1 72 264 @b
90 291 :M
-.113(number )A
f9_12 sf
-.093(id)A
f7_12 sf
-.09(  used to identify the buffer in trace statements. )A
f9_12 sf
-.096(Size)A
f7_12 sf
-.112( designates the maximum number)A
-1 -1 73 294 1 1 72 281 @b
90 303 :M
-.079(of flits that can be stored in the buffer.)A
-1 -1 73 306 1 1 72 293 @b
72 327 :M
f9_12 sf
1.066 .107(MUX *NewMux\(id, fanin\))J
72 339 :M
-.222(int    id;)A
72 351 :M
-.194(int    fanin;)A
90 369 :M
f7_12 sf
-.078(This operation creates and returns a pointer to a new multiplexer with )A
f9_12 sf
-.081(fanin)A
f7_12 sf
-.083( input terminals and)A
-1 -1 73 372 1 1 72 354 @b
90 381 :M
-.094(identifier )A
f9_12 sf
-.136(id.)A
-1 -1 73 384 1 1 72 371 @b
72 405 :M
.401 .04(DEMUX *NewDemux\(id, fanout, routingfcn\))J
72 417 :M
-.222(int    id;)A
72 429 :M
-.179(int    fanout;)A
72 441 :M
-.156(rtfunc routingfcn;)A
90 459 :M
f7_12 sf
-.109(This operation creates and returns a pointer to a new demultiplexer with )A
f9_12 sf
-.117(fanout)A
f7_12 sf
-.116( output terminals)A
-1 -1 73 462 1 1 72 444 @b
90 471 :M
.76 .076(and identifier )J
f9_12 sf
.185(id)A
f7_12 sf
.543 .054(.  It also assigns the function )J
f9_12 sf
.198(routingfcn)A
f7_12 sf
.632 .063( to be used by the demultiplexer in)J
-1 -1 73 474 1 1 72 461 @b
90 483 :M
.282 .028(routing packets to one of its output terminals.  The type )J
f9_12 sf
.084(rtfunc)A
f7_12 sf
.251 .025( is a pointer to a function with)J
-1 -1 73 486 1 1 72 473 @b
90 495 :M
.978 .098(three arguments that returns an integer.  The routing function is called with the following)J
-1 -1 73 498 1 1 72 485 @b
90 507 :M
-.174(arguments each time a packet enters a demultiplexer:)A
-1 -1 73 510 1 1 72 497 @b
108 525 :M
(src -)S
139 525 :M
.876 .088(a pointer to an integer whose value is the id of the source processor sending the)J
-1 -1 73 528 1 1 72 510 @b
139 537 :M
-.262(packet)A
-1 -1 73 540 1 1 72 527 @b
108 555 :M
-.064(dest -)A
139 555 :M
-.098(a pointer to an integer whose value is the id of the destination processor receiving the)A
-1 -1 73 558 1 1 72 540 @b
139 567 :M
-.262(packet)A
-1 -1 73 570 1 1 72 557 @b
108 585 :M
-.104(demuxid - an integer whose value is the id of the demultiplexer.)A
-1 -1 73 588 1 1 72 570 @b
90 603 :M
-.127(The user must provide a function that can compute the demultiplexer output terminal from these)A
-1 -1 73 606 1 1 72 588 @b
90 615 :M
-.015(parameters.  The first two arguments point to fields in a packet descriptor.  They are passed as)A
-1 -1 73 618 1 1 72 605 @b
90 627 :M
.218 .022(pointers so that the routing function can modify the values as the packet moves from node to)J
-1 -1 73 630 1 1 72 617 @b
90 639 :M
.647 .065(node in the network.  For example, one way to implement the classical bit-directed routing)J
-1 -1 73 642 1 1 72 629 @b
90 651 :M
.075 .008(algorithm for perfect shuffle networks is use the least significant bit of the destination at each)J
-1 -1 73 654 1 1 72 641 @b
90 663 :M
.255 .026(stage to determine which switch output to use.  That bit is then discarded and the destination)J
-1 -1 73 666 1 1 72 653 @b
90 675 :M
-.115(bits shifted so that the next stage will find the next most significant bit in the least significant bit)A
-1 -1 73 678 1 1 72 665 @b
90 687 :M
.041(position.)A
-1 -1 73 690 1 1 72 677 @b
endp
%%Page: 10 10
%%BeginPageSetup
initializepage
(; page: 10 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
72 59 :M
f4_12 sf
.741(Operations)A
550 59 :M
(7)S
70 63 -1 1 560 62 1 70 62 @a
72 81 :M
f9_12 sf
.236 .024(IPORT *NewIPort\(id, size\))J
72 93 :M
-.222(int    id;)A
72 105 :M
-.207(int size;)A
90 123 :M
f7_12 sf
.085 .009(This operation creates and returns a pointer to a new network input port with identifier )J
f9_12 sf
(id)S
f7_12 sf
.076 .008( and)J
-1 -1 73 126 1 1 72 108 @b
90 135 :M
-.085(the capacity to buffer up to )A
f9_12 sf
-.084(size)A
f7_12 sf
-.098( packets.)A
-1 -1 73 138 1 1 72 125 @b
72 159 :M
f9_12 sf
-.012(OPORT *NewOPort\(id, size\))A
72 171 :M
-.222(int    id;)A
72 183 :M
-.207(int size;)A
90 201 :M
f7_12 sf
-.04(This operation creates and returns a pointer to a new network output port with identifier )A
f9_12 sf
-.039(id)A
f7_12 sf
-.057( and)A
-1 -1 73 204 1 1 72 186 @b
90 213 :M
-.085(the capacity to buffer up to )A
f9_12 sf
-.084(size)A
f7_12 sf
-.098( packets.)A
-1 -1 73 216 1 1 72 203 @b
72 237 :M
f9_12 sf
.191 .019(void NetworkConnect\(src, dest, src_index, dest_index\))J
72 249 :M
-.24(MODULE *src;)A
72 261 :M
-.192(MODULE *dest;)A
72 273 :M
-.144(int    src_index;)A
72 285 :M
-.116(int    dest_index;)A
90 303 :M
f7_12 sf
.61 .061(This operation is used to construct an interconnection network by interconnecting the basic)J
-1 -1 73 306 1 1 72 288 @b
90 315 :M
-.023(modules \(i.e., buffers, multiplexers, demultiplexers, and ports\).  It connects an output terminal)A
-1 -1 73 318 1 1 72 305 @b
90 327 :M
.319 .032(of the module pointed to by )J
f9_12 sf
.101(src)A
f7_12 sf
.305 .03( to an input terminal of the module pointed to by )J
f9_12 sf
.1(dest)A
f7_12 sf
.188 .019(.  If the)J
-1 -1 73 330 1 1 72 317 @b
90 339 :M
.536 .054(source is a demultiplexer, then )J
f9_12 sf
.152(src_index)A
f7_12 sf
.5 .05( specifies which output terminal is used.  Since all)J
-1 -1 73 342 1 1 72 329 @b
90 351 :M
-.034(other types of modules have only one output terminal, this parameter is ignored for them.  The)A
-1 -1 73 354 1 1 72 341 @b
90 363 :M
2.565 .256(parameter )J
f9_12 sf
.517(dest_index)A
f7_12 sf
1.659 .166( designates an input terminal for the destination module if it is a)J
-1 -1 73 366 1 1 72 353 @b
90 375 :M
-.067(multiplexer.  It is ignored for all other types of modules.)A
-1 -1 73 378 1 1 72 365 @b
72 399 :M
f8_12 sf
2.72 .272(2.2.  NETWORK DELAYS)J
72 423 :M
f7_12 sf
-.117(The operations described here are used to specify the various delays that affect the movement of flits)A
72 435 :M
-.131(through the network.  All delays are an integral multiple of a basic cycle time.  This cycle time can be)A
72 447 :M
-.079(viewed as the period of a system clock used to synchronize the operation of the network.)A
72 471 :M
-.11(The head flit experiences a delay at every module it passes through.  The flits that follow the head only)A
72 483 :M
-.096(experience a delay, called a )A
f9_12 sf
-.087(flit delay)A
f7_12 sf
-.096(, in moving from one buffer to another.  It is assumed that the flit)A
72 495 :M
-.108(delay parameter is long enough to allow a flit to move between two buffers and any multiplexers or)A
72 507 :M
-.123(demultiplexers between them.  The extra delay experienced by the head flit as it moves through)A
72 519 :M
-.106(multiplexers and demultiplexers is overhead due to the work required to perform routing and)A
72 531 :M
-.089(arbitration.)A
72 555 :M
f9_12 sf
.665 .067(void NetworkSetCycleTime\(x\))J
72 567 :M
-.122(double x;)A
90 585 :M
f7_12 sf
1.07 .107(Execution of this operation sets the network cycle time to )J
f9_12 sf
.324(x)A
f7_12 sf
.945 .094(.  All other delays are integer)J
-1 -1 73 588 1 1 72 570 @b
90 597 :M
2.809 .281(multiples of the cycle time.  The default cycle time is 1.0.  This value is used if)J
-1 -1 73 600 1 1 72 587 @b
90 609 :M
-.064(NetworkSetCycleTime\(\) is never called.  It must only be called once and before the first call to)A
-1 -1 73 612 1 1 72 599 @b
90 621 :M
-.104(DriverRun\(\) that starts the simulation.)A
-1 -1 73 624 1 1 72 611 @b
72 645 :M
f9_12 sf
-.037(void NetworkSetFlitDelay\(d\))A
72 657 :M
-.277(int  d;)A
90 675 :M
f7_12 sf
.76 .076(Execution of this operation sets the time required to move a flit from one buffer or port to)J
-1 -1 73 678 1 1 72 660 @b
90 687 :M
.065 .006(another buffer or port to )J
f9_12 sf
(d)S
f7_12 sf
.068 .007( times the network cycle time. This value is used for all buffers and)J
-1 -1 73 690 1 1 72 677 @b
90 699 :M
.095 .009(ports in the simulated network.  The default value is 1, and it will be used if the user does not)J
-1 -1 73 702 1 1 72 689 @b
90 711 :M
-.011(explicitly change it.  If the user does set the flit delay, this must be done before the first call to)A
-1 -1 73 714 1 1 72 701 @b
90 723 :M
-.027(DriverRun\(\).)A
-1 -1 73 726 1 1 72 713 @b
endp
%%Page: 11 11
%%BeginPageSetup
initializepage
(; page: 11 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
72 59 :M
f4_12 sf
.741(Operations)A
550 59 :M
(8)S
70 63 -1 1 560 62 1 70 62 @a
72 81 :M
f9_12 sf
.304 .03(void NetworkSetMuxDelay\(d\))J
72 93 :M
-.332(int d;)A
90 111 :M
f7_12 sf
-.082(Execution of this operation sets the time required to move the head flit through a multiplexer to)A
-1 -1 73 114 1 1 72 96 @b
90 123 :M
f9_12 sf
.097(d)A
f7_12 sf
.249 .025( times the cycle time.  The default value is 0.  This operation must be called before the first)J
-1 -1 73 126 1 1 72 113 @b
90 135 :M
-.103(call to DriverRun\(\).)A
-1 -1 73 138 1 1 72 125 @b
72 159 :M
f9_12 sf
.11 .011(void NetworkSetArbDelay\(d\))J
72 171 :M
-.332(int d;)A
90 189 :M
f7_12 sf
-.131(Execution of this operation sets the time for a multiplexer to arbitrate between competing flits to)A
-1 -1 73 192 1 1 72 174 @b
90 201 :M
f9_12 sf
.106(d)A
f7_12 sf
.252 .025( times the flit delay.    The default value is 0.  This operation must be called before the first)J
-1 -1 73 204 1 1 72 191 @b
90 213 :M
-.103(call to DriverRun\(\).)A
-1 -1 73 216 1 1 72 203 @b
72 237 :M
f9_12 sf
.109 .011(void NetworkSetDemuxDelay\(d\))J
72 249 :M
-.332(int d;)A
90 267 :M
f7_12 sf
-.107(Execution of this operation sets the time required to execute the routing function and then move)A
-1 -1 73 270 1 1 72 252 @b
90 279 :M
.142 .014(a flit through a demultiplexer to )J
f9_12 sf
.051(d)A
f7_12 sf
.126 .013( times the flit delay.  The default value is 0.  This operation)J
-1 -1 73 282 1 1 72 269 @b
90 291 :M
-.115(must be called before the first call to DriverRun\(\).)A
-1 -1 73 294 1 1 72 281 @b
72 315 :M
f9_12 sf
.112 .011(void NetworkSetPktDelay\(d\))J
72 327 :M
-.332(int d;)A
90 345 :M
f7_12 sf
-.106(This operations determines the time to move a packet into an input port or out of an output port.)A
-1 -1 73 348 1 1 72 330 @b
90 357 :M
-.12(That time is dependent on the number of flits in the packet and is given by)A
-1 -1 73 360 1 1 72 347 @b
178 379 :M
-.076(d )A
f10_12 sf
-.112(\264)A
f7_12 sf
-.077( \(number of flits in the packet\) )A
f10_12 sf
-.112(\264)A
f7_12 sf
-.086( \(network cycle time\).)A
-1 -1 73 383 1 1 72 360 @b
90 398 :M
-.104(The default value is 0.  This operation must be called before the first call to DriverRun\(\).)A
-1 -1 73 401 1 1 72 383 @b
72 422 :M
f8_12 sf
2.89 .289(2.3.  NETWORK THRESHOLDS)J
72 446 :M
f7_12 sf
-.135(There are two parameters that determine the flow control technique that will be used to move flits)A
72 458 :M
-.082(through a simulated network.  The first of these is the number of flit positions in a buffer that must be)A
72 470 :M
-.101(free before a new packet can start to enter that buffer.  The second is a flag that specifies whether or)A
72 482 :M
-.111(not a packet's tail flit must be in the same buffer as its head flit before the head flit can move out of the)A
72 494 :M
-.059(buffer.  These parameters can be used to specify the routing mode used by the network.  For example,)A
72 506 :M
-.113(the three most common routing modes are specified in the following way:)A
90 530 :M
f8_12 sf
.473(Store-and-Forward:)A
216 530 :M
f7_12 sf
-.098(Threshold = Packet Size;  Head waits for its tail)A
90 554 :M
f8_12 sf
1.799 .18(Virtual Cut Through:)J
216 554 :M
f7_12 sf
-.064(Threshold = Packet Size;  Head doesn't wait for its tail)A
90 578 :M
f8_12 sf
2.47 .247(Worm Hole:)J
216 578 :M
f7_12 sf
-.062(Threshold < Packet Size \(usually 1\);  Head doesn't wait for its tail)A
72 602 :M
f9_12 sf
.414 .041(void NetworkSetThresh\(t\))J
72 614 :M
-.399(int t;)A
90 632 :M
f7_12 sf
-.05(The threshold of a buffer is the number of flit positions that must be free before another packet)A
-1 -1 73 635 1 1 72 617 @b
90 644 :M
.134 .013(can start to enter the buffer.  This operation sets the threshold for all buffers to )J
f9_12 sf
(t)S
f7_12 sf
.129 .013(.  The default)J
-1 -1 73 647 1 1 72 634 @b
90 656 :M
-.095(value is 1.  This operation must be called before the first call to DriverRun\(\).)A
-1 -1 73 659 1 1 72 646 @b
72 680 :M
f9_12 sf
.902 .09(void NetworkSetWFT\(i\))J
72 692 :M
-.399(int i;)A
90 710 :M
f7_12 sf
-.066(This operations determines whether or not the head flit of a packet will wait in a buffer until its)A
-1 -1 73 713 1 1 72 695 @b
90 722 :M
.52 .052(tail flit is also in that buffer before attempting to leave the buffer.   The argument )J
f9_12 sf
.18 .018(i )J
f7_12 sf
.789 .079(has two)J
-1 -1 73 725 1 1 72 712 @b
endp
%%Page: 12 12
%%BeginPageSetup
initializepage
(; page: 12 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
72 59 :M
f4_12 sf
.741(Operations)A
550 59 :M
(9)S
70 63 -1 1 560 62 1 70 62 @a
90 81 :M
f7_12 sf
.231 .023(possible values: WAIT if heads are to wait for their tails, and NOWAIT if not.    The default)J
-1 -1 73 84 1 1 72 71 @b
90 93 :M
-.109(value is NOWAIT.  This operation must be called before the first call to DriverRun\(\).)A
-1 -1 73 96 1 1 72 83 @b
72 117 :M
f8_12 sf
2.821 .282(2.4.  PACKET OPERATIONS)J
72 141 :M
f7_12 sf
-.111(These operations are used to create and initialize packets, to send them into a network through an input)A
72 153 :M
-.058(port, and to remove them from a network through an output port.)A
72 177 :M
f9_12 sf
.415 .041(PACKET *NewPacket\(seqno, msgptr, size, src, dest\))J
72 189 :M
-.127(int     seqno;)A
72 201 :M
.412 .041(MESSAGE *msgptr;)J
72 213 :M
-.138(int     size;)A
72 225 :M
-.211(int     src;)A
72 237 :M
-.166(int     dest;)A
90 255 :M
f7_12 sf
.019 .002(This operation creates and returns a pointer to a new packet and assigns it values given by the)J
-1 -1 73 258 1 1 72 240 @b
90 267 :M
.444 .044(arguments.  S)J
f9_12 sf
.13(eqno)A
f7_12 sf
.304 .03( can be used to order the packets of a message.  )J
f9_12 sf
.129(Msgptr)A
f7_12 sf
.279 .028( is a pointer to the)J
-1 -1 73 270 1 1 72 257 @b
90 279 :M
.314 .031(packet's message, and )J
f9_12 sf
.068(size)A
f7_12 sf
.19 .019( is the number of flits in the packet.  )J
f9_12 sf
.08(Src)A
f7_12 sf
.141 .014( and )J
f9_12 sf
.073(dest)A
f7_12 sf
.259 .026( are identifiers of)J
-1 -1 73 282 1 1 72 269 @b
90 291 :M
1.139 .114(the sending and receiving processors for the packet.  They are used by the demultiplexer)J
-1 -1 73 294 1 1 72 281 @b
90 303 :M
-.082(routing functions to move the packet through the network.)A
-1 -1 73 306 1 1 72 293 @b
72 327 :M
f9_12 sf
-.047(double PacketSend\(pkt, port\))A
72 339 :M
.323 .032(PACKET *pkt;)J
72 351 :M
-.165(IPORT  *port;)A
90 369 :M
f7_12 sf
-.096(This operation attempts to send the packet pointed to by )A
f9_12 sf
-.098(pkt)A
f7_12 sf
-.102( into a network through the network)A
-1 -1 73 372 1 1 72 354 @b
90 381 :M
(input port pointed to by )S
f9_12 sf
(port)S
f7_12 sf
(.  If the operation fails \(because the port's queue is full\), it returns)S
-1 -1 73 384 1 1 72 371 @b
90 393 :M
.082 .008(-1.0; otherwise, it returns the time the network needed to move the packet into the port.  Note)J
-1 -1 73 396 1 1 72 383 @b
90 405 :M
.481 .048(that this operation returns at the same simulation time it was called and before the packet is)J
-1 -1 73 408 1 1 72 395 @b
90 417 :M
-.054(actually moved into the network.  The activity that called PacketSend\(\) can use its return value)A
-1 -1 73 420 1 1 72 407 @b
90 429 :M
-.116(to delay for the send time, or it can continue and overlap its future operation with the movement)A
-1 -1 73 432 1 1 72 419 @b
90 441 :M
-.125(of the packet into the port \(for example, to simulate DMA\).)A
-1 -1 73 444 1 1 72 431 @b
72 465 :M
f9_12 sf
-.061(PACKET *PacketReceive\(port\))A
72 477 :M
-.241(OPORT *port;)A
90 495 :M
f7_12 sf
-.073(This operation attempts to remove a packet from a network through the port pointed to by )A
f9_12 sf
-.075(port)A
f7_12 sf
(.)S
-1 -1 73 498 1 1 72 480 @b
90 507 :M
-.091(If there are no packets available at this port, it returns the NULL pointer.)A
-1 -1 73 510 1 1 72 497 @b
72 531 :M
f9_12 sf
-.104(PKTDATA*PacketGetData\(pkt\))A
72 543 :M
.323 .032(PACKET *pkt;)J
90 561 :M
f7_12 sf
.085 .008(This operation is used to access the data in a packet.  It returns a pointer to a structure of type)J
-1 -1 73 564 1 1 72 546 @b
90 573 :M
-.076(PKTDATA that contains the packet's data.  This structures is defined as follows:)A
-1 -1 73 576 1 1 72 563 @b
99 591 :M
-.16(struct PKTDATA {)A
-1 -1 73 594 1 1 72 576 @b
99 603 :M
-.111(   int )A
171 603 :M
-.065(seqno;)A
229 603 :M
-.039(/* User supplied ID for sequencing a message's packets)A
504 603 :M
-.334(*/)A
-1 -1 73 606 1 1 72 594 @b
99 615 :M
-.111(   MESSAGE)A
171 615 :M
-.124(*mesgptr;)A
229 615 :M
-.128(/* A pointer to the message that this packet belongs to)A
504 615 :M
-.334(*/)A
-1 -1 73 618 1 1 72 606 @b
99 627 :M
-.134(   int)A
171 627 :M
-.189(pktsize;)A
229 627 :M
-.117(/* Number of flits in the packet)A
504 627 :M
-.334(*/)A
-1 -1 73 630 1 1 72 618 @b
99 639 :M
-.111(   int )A
171 639 :M
-.108(srccpu;)A
229 639 :M
-.104(/* The ID of the CPU sending the packet)A
504 639 :M
-.334(*/)A
-1 -1 73 642 1 1 72 630 @b
99 651 :M
-.111(   int )A
171 651 :M
-.123(destcpu; )A
229 651 :M
-.131(/* The ID of the CPU receiving the packet)A
504 651 :M
-.334(*/)A
-1 -1 73 654 1 1 72 642 @b
99 663 :M
-.082(   double)A
171 663 :M
-.288(recvtime;)A
229 663 :M
-.14(/* Time to remove the packet from an output port)A
504 663 :M
-.334(*/)A
-1 -1 73 666 1 1 72 654 @b
99 675 :M
-.082(   double)A
171 675 :M
-.329(createtime;)A
229 675 :M
-.17(/* Time the packet was created)A
504 675 :M
-.334(*/)A
-1 -1 73 678 1 1 72 666 @b
99 687 :M
-.082(   double)A
171 687 :M
-.332(nettime;)A
229 687 :M
-.135(/* Time the packet spent in the network )A
504 687 :M
-.334(*/)A
-1 -1 73 690 1 1 72 678 @b
99 699 :M
-.082(   double)A
171 699 :M
-.285(blktime;)A
229 699 :M
-.127(/* Time the packet was blocked in the network)A
504 699 :M
-.334(*/)A
-1 -1 73 702 1 1 72 690 @b
99 711 :M
-.082(   double)A
171 711 :M
-.221(oporttime;)A
229 711 :M
-.135(/* Time the packet spent waiting in an output port)A
504 711 :M
-.334(*/)A
-1 -1 73 714 1 1 72 702 @b
99 723 :M
-.094(};)A
-1 -1 73 726 1 1 72 714 @b
endp
%%Page: 13 13
%%BeginPageSetup
initializepage
(; page: 13 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
72 59 :M
f4_12 sf
.741(Operations)A
542 59 :M
2.658(10)A
70 63 -1 1 560 62 1 70 62 @a
90 81 :M
f7_12 sf
-.063(The first five of these fields are set when the packet is created with NewPacket\(\).  The value of)A
-1 -1 73 84 1 1 72 66 @b
90 93 :M
2.251 .225(the )J
f9_12 sf
.921(recvtime)A
f7_12 sf
2.757 .276( field is the time required to move the packet out of the output port.)J
-1 -1 73 96 1 1 72 83 @b
90 105 :M
-.071(PacketReceive\(\) returns a packet pointer at the same simulation time that it is called and before)A
-1 -1 73 108 1 1 72 95 @b
90 117 :M
-.046(the packet is actually removed from the port.   )A
f9_12 sf
-.054(Recvtime)A
f7_12 sf
-.048( can be added to the current simulation)A
-1 -1 73 120 1 1 72 107 @b
90 129 :M
.865 .087(time to find the earliest time at which the data is really available.  The activity that called)J
-1 -1 73 132 1 1 72 119 @b
90 141 :M
-.036(PacketReceive\(\) can use this value to delay for the receive time, or it can continue and overlap)A
-1 -1 73 144 1 1 72 131 @b
90 153 :M
.125 .012(its future operation with the movement of the packet out of the port \(for example, to simulate)J
-1 -1 73 156 1 1 72 143 @b
90 165 :M
-.247(DMA\).)A
-1 -1 73 168 1 1 72 155 @b
90 183 :M
-.086(The last four fields are variables used to measure the time a packet spends in various states as it)A
-1 -1 73 186 1 1 72 168 @b
90 195 :M
-.067(moves through the network.  They are defined in the section on network statistics below.)A
-1 -1 73 198 1 1 72 185 @b
72 219 :M
f9_12 sf
-.137(void PacketFree\(pkt\))A
72 231 :M
.323 .032(PACKET *pkt;)J
90 249 :M
f7_12 sf
.452 .045(This operation returns the packet pointed to by )J
f9_12 sf
.124(pkt)A
f7_12 sf
.35 .035( to a pool of free packets.  It also updates)J
-1 -1 73 252 1 1 72 234 @b
90 261 :M
-.082(those network statistics records that have been activated \(Section 2.6\).)A
-1 -1 73 264 1 1 72 251 @b
72 285 :M
f8_12 sf
2.951 .295(2.5.  PACKET SYNCHRONIZATION OPERATIONS)J
72 309 :M
f7_12 sf
-.108(The operations described here provide the user with a means to synchronize the movement of packets)A
72 321 :M
-.068(into and out of a network.  They can be used to test the status of a port, and they provide access to)A
72 333 :M
-.071(semaphores within the ports that can be used to synchronize sending and receiving processes.)A
72 357 :M
f9_12 sf
-.075(SEMAPHORE *IPortSemaphore\(port\))A
72 369 :M
-.18(IPORT *port;)A
90 387 :M
f7_12 sf
-.023(This operation returns a pointer to a semaphore within the input port pointed to by )A
f9_12 sf
-.024(port)A
f7_12 sf
-.021(.  If the)A
-1 -1 73 390 1 1 72 372 @b
90 399 :M
.753 .075(port is full and can not accept new packets, a sending activity can wait on this semaphore.)J
-1 -1 73 402 1 1 72 389 @b
90 411 :M
-.121(When space becomes available, the port will signal the semaphore and release the activity.)A
-1 -1 73 414 1 1 72 401 @b
72 435 :M
f9_12 sf
-.174(int IportSpace\(port\))A
72 447 :M
-.18(IPORT *port;)A
90 465 :M
f7_12 sf
.425 .042(This operation returns the number of packets that can be sent to the input port pointed to by)J
-1 -1 73 468 1 1 72 450 @b
90 477 :M
f9_12 sf
-.098(port)A
f7_12 sf
-.096( before its queue becomes full.)A
-1 -1 73 480 1 1 72 467 @b
72 501 :M
f9_12 sf
-.156(int IportGetId\(port\))A
72 513 :M
-.18(IPORT *port;)A
90 531 :M
f7_12 sf
-.072(  This operation returns the user assigned id of the port pointed to by )A
f9_12 sf
-.078(port)A
f7_12 sf
(.)S
-1 -1 73 534 1 1 72 516 @b
72 555 :M
f9_12 sf
-.098(SEMAPHORE *OPortSemaphore\(port\))A
72 567 :M
-.241(OPORT *port;)A
90 585 :M
f7_12 sf
-.081(This operation returns a pointer to a semaphore within the port pointed to by )A
f9_12 sf
-.086(port)A
f7_12 sf
-.073(.  If the port is)A
-1 -1 73 588 1 1 72 570 @b
90 597 :M
-.071(empty, a sending activity can wait on this semaphore.  When a packet arrives in the port, it will)A
-1 -1 73 600 1 1 72 587 @b
90 609 :M
-.124(signal the semaphore and release the waiting activity.)A
-1 -1 73 612 1 1 72 599 @b
72 633 :M
f9_12 sf
-.22(int OportPackets\(port\))A
72 645 :M
-.241(OPORT *port;)A
90 663 :M
f7_12 sf
.296 .03(This operation returns the number of packets that are currently queued at the network output)J
-1 -1 73 666 1 1 72 648 @b
90 675 :M
-.069(port pointed to by )A
f9_12 sf
-.074(port)A
f7_12 sf
(.)S
-1 -1 73 678 1 1 72 665 @b
endp
%%Page: 14 14
%%BeginPageSetup
initializepage
(; page: 14 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
72 59 :M
f4_12 sf
.741(Operations)A
542 59 :M
2.658(11)A
70 63 -1 1 560 62 1 70 62 @a
72 81 :M
f9_12 sf
-.202(int OportGetIdport\))A
72 93 :M
-.241(OPORT *port;)A
90 111 :M
f7_12 sf
-.071(   This operation returns the user assigned id of the port pointed to by )A
f9_12 sf
-.078(port)A
f7_12 sf
(.)S
-1 -1 73 114 1 1 72 96 @b
72 135 :M
f8_12 sf
3.078 .308(2.6.  NETWORK STATISTICS)J
72 159 :M
f7_12 sf
-.121(NETSIM can generate several useful statistics during a simulation.  They are implemented with)A
72 171 :M
-.126(YACSIM statistics records, so they are capable of automatically calculating means and histograms for)A
72 183 :M
-.139(each of the statistics that are collected. Statistics can be collected on the following variables:)A
90 207 :M
-.282(NETTIME:)A
171 207 :M
-.11(The time a packet spends in the network, defined as the difference between the)A
171 219 :M
-.159(time the head flit of the packet enters an input port and the time the tail flit of that)A
171 231 :M
-.121(packet leaves an output port.  The variable is also called the )A
f9_12 sf
-.129(packet latency)A
f7_12 sf
(.)S
90 255 :M
-.236(BLKTIME:)A
171 255 :M
-.129(The total time a packet is blocked while in the network.  This includes time the)A
171 267 :M
-.083(head flit of the packet waits for a multiplexer, for free buffer space, and for)A
171 279 :M
-.091(packets ahead of it in a buffer to move out of that buffer.  It is a measure of the)A
171 291 :M
-.052(congestion in the network.)A
90 315 :M
-.332(OPORTTIME:)A
171 315 :M
-.127(The time a packet spends in an output port waiting for an activity to take it out by)A
171 327 :M
-.104(executing a PacketReceive\(\) operation.  It is measured from the time the packet's)A
171 339 :M
-.115(tail enters the port until its head starts to leave the port.)A
90 363 :M
-.497(MOVETIME:)A
171 363 :M
-.079(The time a packet is making progress through the network.  It is defined as)A
229 387 :M
-.2(NETTIME - BLKTIME - OPORTTIME)A
171 411 :M
-.091(This variable represents an ideal latency.  That is, it is a measure of how much)A
171 423 :M
-.102(time the packet would spend in the network if it were never blocked, and if it)A
171 435 :M
-.07(were removed from the network as soon as it arrived at an output port.)A
90 459 :M
-.331(CREATETIME:)A
171 459 :M
-.103(This is the time at which it the packet was created by NewPacket\(\).  Subtracting)A
171 471 :M
-.132(this from the current simulation time just before freeing the packet with)A
171 483 :M
-.131(PacketFree\(\) will give the life time of the packet.)A
72 507 :M
-.129(Each of the first four variables above is said to be )A
f9_12 sf
-.135(active)A
f7_12 sf
-.135( if the packet is currently accumulating time for)A
72 519 :M
-.108(that variable.  Otherwise the variable is said to be )A
f9_12 sf
-.107(idle)A
f7_12 sf
-.115(.  These variables are updated for every packet as)A
72 531 :M
-.156(it switches from active and idle.  The variable CREATETIME is active the whole time the packet)A
72 543 :M
.112(exists.)A
72 567 :M
-.138(All five variables can be accessed after a packet has been received.  They are available as fields in a)A
72 579 :M
-.115(structure of type PKTDATA associated with each packet.  This structure is obtained with the operation)A
72 591 :M
-.075(PacketGetData\(\) as described in Section 2.4.)A
72 615 :M
-.132(There are five YACSIM statistics records built into NETSIM and used to collect statistics on the)A
72 627 :M
-.14(variables defined above.  They are updated automatically with the total time the associated variable was)A
72 639 :M
.51 .051(active whenever the packet is freed by calling PacketFree\(\).  )J
f8_12 sf
.639 .064(Note that these statistics records)J
72 651 :M
1.756 .176(are not updated until the packet is freed, and are not updated at all if it is never)J
72 663 :M
.604(freed)A
f7_12 sf
(.)S
72 687 :M
-.137(The following operations are used to activate and access the automatic statistics collection features of)A
72 699 :M
-.111(NETSIM.  Statistics records and their operations are defined in the YACSIM Reference Manual.)A
endp
%%Page: 15 15
%%BeginPageSetup
initializepage
(; page: 15 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
72 59 :M
f4_12 sf
.741(Operations)A
542 59 :M
2.658(12)A
70 63 -1 1 560 62 1 70 62 @a
72 81 :M
f9_12 sf
.453 .045(void NetworkCollectStats\(type,histflg,nbin,lowbin,highbin\))J
72 93 :M
-.206(int type;)A
72 105 :M
-.067(int histflg)A
72 117 :M
-.249(int nbin;)A
72 129 :M
-.102(double lowbin;)A
72 141 :M
-.166(double highbin;)A
90 159 :M
f7_12 sf
-.015(This operation activates the automatic collection of network statistics.  Five different statistics)A
-1 -1 73 162 1 1 72 144 @b
90 171 :M
.983 .098(records exist and are specified by the first parameter )J
f9_12 sf
.28(type)A
f7_12 sf
.852 .085(, which can have any one of the)J
-1 -1 73 174 1 1 72 161 @b
90 183 :M
-.109(following five values:)A
-1 -1 73 186 1 1 72 173 @b
108 201 :M
-.235(NETTIME )A
180 201 :M
-.167(Activate collection of "total time in the network" statistics)A
-1 -1 73 204 1 1 72 186 @b
108 213 :M
-.22(BLKTIME)A
180 213 :M
-.156(Activate collection of "time blocked in the network" statistics)A
-1 -1 73 216 1 1 72 204 @b
108 225 :M
-.331(OPORTTIME)A
180 225 :M
-.154(Activate collection of "time waiting in an output port" statistics)A
-1 -1 73 228 1 1 72 216 @b
108 237 :M
-.521(MOVETIME)A
180 237 :M
-.177(Activate collection of "time packet moving" statistics)A
-1 -1 73 240 1 1 72 228 @b
108 249 :M
-.235(LIFETIME)A
180 249 :M
-.182(Activate collection of "time packet is alive" statistics)A
-1 -1 73 252 1 1 72 240 @b
90 267 :M
.226 .023(All of the five are point statistics records with the calculation of means enabled.  Histograms)J
-1 -1 73 270 1 1 72 252 @b
90 279 :M
.128 .013(can be enabled or not by setting the parameter )J
f9_12 sf
.034(histflg)A
f7_12 sf
.129 .013( to HIST or NOHIST.  If histograms are)J
-1 -1 73 282 1 1 72 269 @b
90 291 :M
.208 .021(enabled, the number of bins will be )J
f9_12 sf
.066(nbins)A
f7_12 sf
.183 .018(+2 with )J
f9_12 sf
.066(nbins)A
f7_12 sf
.245 .025( equal-sized bins between )J
f9_12 sf
.07(lowbin)A
f7_12 sf
.2 .02( and)J
-1 -1 73 294 1 1 72 281 @b
90 303 :M
f9_12 sf
-.059(highbin)A
f7_12 sf
-.056(  and an overflow bin on each end.)A
-1 -1 73 306 1 1 72 293 @b
72 327 :M
f9_12 sf
.416 .042(void NetworkResetStats\(\))J
90 345 :M
f7_12 sf
-.086(This operation resets all five statistics records.)A
-1 -1 73 348 1 1 72 330 @b
72 369 :M
f9_12 sf
-.012(void NetworkStatPtr\(type\))A
72 381 :M
-.206(int type;)A
90 399 :M
f7_12 sf
-.075(This operation returns a pointer to the network statistics record specified by the )A
f9_12 sf
-.081(type)A
f7_12 sf
-.088( parameter.)A
-1 -1 73 402 1 1 72 384 @b
90 411 :M
-.039(The five possible values for )A
f9_12 sf
-.042(type)A
f7_12 sf
-.041( are the same as for the NetworkCollectStats\(\) operation.  The)A
-1 -1 73 414 1 1 72 401 @b
90 423 :M
-.114(chapter on statistics records in the YACSIM Reference Manual describes the various operations)A
-1 -1 73 426 1 1 72 413 @b
90 435 :M
-.106(that can be performed on a statistics record once you have a pointer to it.)A
-1 -1 73 438 1 1 72 425 @b
72 459 :M
f9_12 sf
.334 .033(void NetworkStatRept\(\))J
90 477 :M
f7_12 sf
1.539 .154(Although standard or customized reports can be generated for any statistics record, this)J
-1 -1 73 480 1 1 72 462 @b
90 489 :M
1.596 .16(operation generates a simplified presentation of the statistics automatically collected by)J
-1 -1 73 492 1 1 72 479 @b
90 501 :M
-.084(NETSIM during a simulation.  It prints the following values:)A
-1 -1 73 504 1 1 72 491 @b
108 519 :M
f8_12 sf
.772 .077(Network throughput: )J
f7_12 sf
.52 .052( The total number of packet passed through the network divided)J
-1 -1 73 522 1 1 72 504 @b
108 531 :M
.18 .018(by the total time of the simulation.  This measure is also available as the rate of the "total)J
-1 -1 73 534 1 1 72 521 @b
108 543 :M
-.092(time in the network" statistics record.)A
-1 -1 73 546 1 1 72 533 @b
108 561 :M
f8_12 sf
.618 .062(Average packet latency:)J
f7_12 sf
.371 .037(  The mean of the NETIME variable.)J
-1 -1 73 564 1 1 72 546 @b
108 579 :M
f8_12 sf
.061 .006(Ideal latency: )J
f7_12 sf
.06 .006( The mean of the MOVETIME variable.)J
-1 -1 73 582 1 1 72 564 @b
108 597 :M
f8_12 sf
.288 .029(Normalized latency: )J
f7_12 sf
.186 .019( The ratio of ideal latency to average latency.)J
-1 -1 73 600 1 1 72 582 @b
108 615 :M
f8_12 sf
3.415 .342(Average time packets blocked in the network:)J
f7_12 sf
2.534 .253(  The mean of the BLKTIME)J
-1 -1 73 618 1 1 72 600 @b
108 627 :M
-.08(variable.)A
-1 -1 73 630 1 1 72 617 @b
108 645 :M
f8_12 sf
.811 .081(Average time packets wait to be received:  )J
f7_12 sf
1.058 .106(The mean of the OPORTTIME variable.)J
-1 -1 73 648 1 1 72 630 @b
108 663 :M
f8_12 sf
1.026 .103(Average packet lifetime: )J
f7_12 sf
.744 .074( The mean of the lifetimes of all packets generated during a)J
-1 -1 73 666 1 1 72 648 @b
108 675 :M
-.066(simulation.)A
endp
%%Page: 16 16
%%BeginPageSetup
initializepage
(; page: 16 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
542 739 :M
f4_12 sf
2.658(13)A
133 86 :M
f8_18 sf
2.501 .25(3.  EXAMPLE NETWORK SIMULATIONS)J
72 129 :M
f7_12 sf
-.086(This section provides two examples of NETSIM simulations.  Although they are for very simple)A
72 141 :M
-.082(networks containing only a few modules, they illustrate the use of most of the NETSIM modules and)A
72 153 :M
(operations.)S
72 177 :M
f8_12 sf
3.105 .31(3.1.  SWITCH #1)J
72 201 :M
f7_12 sf
-.076(This network is a 2 by 2 switch with buffers on the output terminals.  It is realized by connecting a 2-)A
72 213 :M
-.075(input multiplexer to a 2-output demultiplexer as shown in Fig. 4.  This is essentially a bus where the)A
72 225 :M
-.117(connection between the multiplexer and demultiplexer must be used in all transfers.  Therefore only)A
72 237 :M
-.141(one transfer can take place at a time.)A
:a
36 <3049883AB59CF039
><3030304949498888883A3A3AB5B5B59C9C9CF0F0F0393939
>fg bk :b
204 252 221 49 rC
:e
0 G
823 419 :M
%%DSIDICT:_cv
currentdict /bu known {bu}if
userdict /_cv known not{userdict /_cv 30 dict put}if
_cv begin
/bdf{bind def}bind def
currentscreen/cs exch def/ca exch def/cf exch def
systemdict/setcmykcolor known{/cvcmyk /setcmykcolor load def}{/cvcmyk{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll}repeat setrgbcolor pop}bdf}ifelse
/ss{//cf //ca //cs setscreen}bdf
/stg{ss setgray}bdf
/strgb{ss setrgbcolor}bdf
/stcmyk{ss cvcmyk}bdf
/min1{dup 0 eq{pop 1}if}bdf
end
currentdict /bn known {bn}if
psb
pse
1 G
np 256 288 :M
256 264 :L
272 276 :L
256 288 :L
:K
eofill
0 G
-1 -1 257 289 1 1 256 264 @b
256 265 -1 1 273 276 1 256 264 @a
-1 -1 257 289 1 1 272 276 @b
244 269 -1 1 257 268 1 244 268 @a
244 285 -1 1 257 284 1 244 284 @a
272 277 -1 1 285 276 1 272 276 @a
272 276 :M
psb
pse
1 G
np 312 288 :M
312 264 :L
296 276 :L
312 288 :L
:K
eofill
0 G
-1 -1 313 289 1 1 312 264 @b
-1 -1 297 277 1 1 312 264 @b
296 277 -1 1 313 288 1 296 276 @a
312 269 -1 1 325 268 1 312 268 @a
312 285 -1 1 325 284 1 312 284 @a
284 277 -1 1 297 276 1 284 276 @a
1 G
336 284 37 17 rF
0 G
336.5 284.5 36 16 rS
324 293 -1 1 337 292 1 324 292 @a
372 293 -1 1 385 292 1 372 292 @a
1 G
336 252 37 17 rF
0 G
336.5 252.5 36 16 rS
324 261 -1 1 337 260 1 324 260 @a
372 261 -1 1 385 260 1 372 260 @a
-1 -1 325 269 1 1 324 260 @b
-1 -1 325 293 1 1 324 284 @b
-1 -1 213 261 1 1 216 256 @b
212 261 -1 1 221 268 1 212 260 @a
-1 -1 217 257 1 1 220 252 @b
220 253 -1 1 237 252 1 220 252 @a
-1 -1 237 269 1 1 236 252 @b
220 269 -1 1 237 268 1 220 268 @a
204 261 -1 1 213 260 1 204 260 @a
236 261 -1 1 245 260 1 236 260 @a
412 289 -1 1 417 292 1 412 288 @a
-1 -1 409 301 1 1 416 292 @b
408 285 -1 1 413 288 1 408 284 @a
392 285 -1 1 409 284 1 392 284 @a
-1 -1 393 301 1 1 392 284 @b
392 301 -1 1 409 300 1 392 300 @a
384 293 -1 1 393 292 1 384 292 @a
416 293 -1 1 425 292 1 416 292 @a
412 257 -1 1 417 260 1 412 256 @a
-1 -1 409 269 1 1 416 260 @b
408 253 -1 1 413 256 1 408 252 @a
392 253 -1 1 409 252 1 392 252 @a
-1 -1 393 269 1 1 392 252 @b
392 269 -1 1 409 268 1 392 268 @a
384 261 -1 1 393 260 1 384 260 @a
416 261 -1 1 425 260 1 416 260 @a
-1 -1 245 269 1 1 244 260 @b
-1 -1 213 293 1 1 216 288 @b
212 293 -1 1 221 300 1 212 292 @a
-1 -1 217 289 1 1 220 284 @b
220 285 -1 1 237 284 1 220 284 @a
-1 -1 237 301 1 1 236 284 @b
220 301 -1 1 237 300 1 220 300 @a
204 293 -1 1 213 292 1 204 292 @a
236 293 -1 1 245 292 1 236 292 @a
-1 -1 245 293 1 1 244 284 @b
gR
gS 31 31 552 730 rC
223 326 :M
f7_12 sf
.065 .007(Fig. 4.  2)J
f10_12 sf
(\264)S
f7_12 sf
.107 .011(2 Switch Realized as a Bus.)J
72 351 :M
f5_12 sf
4.136 .414(Program Listing:)J
108 374 :M
f12_9 sf
-.425(#include "sim.h")A
108 394 :M
-.427(IPORT *inport0;)A
108 404 :M
-.427(IPORT *inport1;)A
108 414 :M
-.425(OPORT *outport0;)A
108 424 :M
-.425(OPORT *outport1;)A
108 444 :M
-.432(int npkt = 6;)A
108 454 :M
-.429(int pktsz = 2;)A
108 464 :M
-.429(int bufsz = 2;)A
108 474 :M
-.415(double send_delay = 1.25;)A
108 484 :M
-.415(double recv_delay = 1.75;)A
108 504 :M
-.417(int router\(src,dest,id\))A
108 514 :M
-.449(int *src;)A
108 524 :M
-.443(int *dest;)A
108 534 :M
-.465(int id;)A
108 544 :M
({)S
108 554 :M
-.405(   return *dest;   /* Trivial router, uses destination directly */)A
108 564 :M
(})S
108 584 :M
-.421(void UserProcessS\(\))A
108 594 :M
-.403(/*   There is one of these processes at each input port of the network.  It simply    */)A
108 604 :M
-.403(/*   generates packets and sends them into the network.  If the input port is         */)A
108 614 :M
-.403(/*   full, the process waits in the port's semaphore until space is available.        */)A
108 624 :M
-.403(/*   After sending a packet, the process delays for the amount of time it would       */)A
108 634 :M
-.403(/*   take to move the packet into the input port plus a user specified delay.         */)A
108 644 :M
({)S
108 654 :M
-.427(   PACKET *pkt;)A
108 664 :M
-.424(   IPORT *inport;)A
108 674 :M
-.424(   int i, s, k=0;)A
108 684 :M
-.42(   double senddelay;)A
108 704 :M
-.403(   if \(\(i = ActivityArgSize\(ME\)\) == 1\) {          /* If attached to port 1            */)A
108 714 :M
-.403(      s = i;                                      /* Remember the source module id    */)A
108 724 :M
-.403(      inport = inport1;                           /* Remember the port id             */)A
endp
%%Page: 17 17
%%BeginPageSetup
initializepage
(; page: 17 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
72 59 :M
f4_12 sf
.855(Examples)A
542 59 :M
2.658(14)A
70 63 -1 1 560 62 1 70 62 @a
108 80 :M
f12_9 sf
-.403(      i = 100;                                    /* Number port 1 packets from 100   */)A
108 90 :M
-.532(   })A
108 100 :M
-.403(   else {                                         /* Else attached to port 0          */)A
108 110 :M
-.403(      s = 0;                                      /* Remember the source module id    */)A
108 120 :M
-.403(      inport = inport0;                           /* Remember the port id             */)A
108 130 :M
-.403(      i = 200;                                    /* Number port 0 packets from 200   */)A
108 140 :M
-.532(   })A
108 150 :M
-.403(   while \(npkt > 0\) {                             /* Send npkt packets into the net   */)A
108 160 :M
-.403(      pkt = NewPacket\(i+k,NULL,pktsz\);            /* Get a new packet                 */)A
108 170 :M
-.403(      senddelay = PacketSend\(pkt,inport,s,k%2\);   /* Try to send it into the net      */)A
108 180 :M
-.403(      if \(senddelay >= 0.0\) {                     /* If the send was succussful       */)A
108 190 :M
-.403(         npkt--;                                  /* One fewer packet to send         */)A
108 200 :M
-.403(         ProcessDelay\(senddelay\);                 /* Delay for the packet move time   */)A
108 210 :M
-.404(         printf\("Packet %d delivered to net at time %g\\n",i+k,GetSimTime\(\)\);)A
108 220 :M
-.403(         k++;                                     /* Used to generate packet numbers  */)A
108 230 :M
-.465(      })A
108 240 :M
-.403(      else SemaphoreWait\(IPortSemaphore\(inport\)\); /* Otherwise wait in the semaphore  */)A
108 250 :M
-.403(      ProcessDelay\(send_delay\);                   /* Delay for extra time             */)A
108 260 :M
-.532(   })A
108 270 :M
(})S
108 290 :M
-.421(void UserProcessR\(\))A
108 300 :M
-.403(/*   There is one of these processes at each output port of the network.  It waits    */)A
108 310 :M
-.403(/*   until a packet arrives at the port and then removes it from the network.         */)A
108 320 :M
({)S
108 330 :M
-.427(   PACKET *pkt;)A
108 340 :M
-.422(   OPORT *outport;)A
108 350 :M
-.42(   PKTDATA *pktdata;)A
108 360 :M
-.427(   int i,j,k=0;)A
108 380 :M
-.403(   if \(\(i = ActivityArgSize\(ME\)\) == 1\) {          /* If attached to port 1            */)A
108 390 :M
-.403(      outport = outport1;                         /* Remember the port id             */)A
108 400 :M
-.532(   })A
108 410 :M
-.403(   else {                                         /* Else attached to port 0          */)A
108 420 :M
-.403(      outport = outport0;                         /* Remember the port id             */)A
108 430 :M
-.532(   })A
108 440 :M
-.429(   while \(1\) {)A
108 450 :M
-.403(      if \(OPortPackets\(outport\)\) {                /* If there is a packet in the port */)A
108 460 :M
-.403(         pkt = PacketReceive\(outport\);            /* Take it out of the network       */)A
108 470 :M
-.403(         pktdata = PacketGetData\(pkt\);            /* Get a pointer to its data        */)A
108 480 :M
-.404(         printf\("Receiving packet %d at time %g\\n",pktdata->seqno,GetSimTime\(\)\);)A
108 490 :M
-.405(         printf\("    Life time = %g; Total time in the net = %g\\n",)A
108 500 :M
-.405(            GetSimTime\(\)-pktdata->createtime, pktdata->nettime\);)A
108 510 :M
-.404(         printf\("    Time blocked in the net = %g, Time in an output port = %g\\n",)A
108 520 :M
-.407(            pktdata->blktime, pktdata->oporttime\);)A
108 530 :M
-.403(         PacketFree\(pkt\);                         /* Release the packet               */)A
108 540 :M
-.465(      })A
108 550 :M
-.403(      else SemaphoreWait\(OPortSemaphore\(outport\)\);/* Otherwise wait in th semaphore   */)A
108 560 :M
-.403(      ProcessDelay\(recv_delay\);                   /* Delay for extra time             */)A
108 570 :M
-.532(   })A
108 580 :M
(})S
108 600 :M
-.42(UserMain\(argc, argv\))A
108 610 :M
-.449(int argc;)A
108 620 :M
-.435(char** argv;)A
108 630 :M
({)S
108 640 :M
-.421(  PROCESS* process;)A
108 650 :M
-.416(  BUFFER   *buf0, *buf1;)A
108 660 :M
-.425(  MUX      *mux;)A
108 670 :M
-.422(  DEMUX    *demux;)A
108 690 :M
-.403(  if \(argc > 1\)                      /* 1st argument is the number of packets         */)A
108 700 :M
-.415(     npkt = atoi\(argv[1]\);)A
108 710 :M
-.403(  if \(argc > 2\)                      /* 2nd argument is the packet size               */)A
108 720 :M
-.414(     pktsz = atoi\(argv[2]\);)A
endp
%%Page: 18 18
%%BeginPageSetup
initializepage
(; page: 18 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
72 59 :M
f4_12 sf
.855(Examples)A
542 59 :M
2.658(15)A
70 63 -1 1 560 62 1 70 62 @a
108 80 :M
f12_9 sf
-.403(  if \(argc > 3\)                      /* 3rd argument is the buffer size               */)A
108 90 :M
-.414(     bufsz = atoi\(argv[3]\);)A
108 100 :M
-.403(  if \(argc > 4\)                      /* 4th argument is the extra send delay          */)A
108 110 :M
-.409(     send_delay = \(double\)atoi\(argv[4]\);)A
108 120 :M
-.403(  if \(argc > 5\)                      /* 5th argument is the extra receive delay       */)A
108 130 :M
-.409(     recv_delay = \(double\)atoi\(argv[5]\);)A
108 150 :M
-.403(  NetworkSetFlitDelay\(1\);            /* All delays set to 1 times cycle time          */)A
108 160 :M
-.416(  NetworkSetMuxDelay\(1\);)A
108 170 :M
-.416(  NetworkSetArbDelay\(1\);)A
108 180 :M
-.415(  NetworkSetDemuxDelay\(1\);)A
108 190 :M
-.416(  NetworkSetPktDelay\(1\);)A
108 210 :M
-.403(  inport0 = NewIPort\(10, 2\);         /* Create input ports                            */)A
108 220 :M
-.413(  inport1 = NewIPort\(11, 2\);)A
108 230 :M
-.403(  mux   = NewMux\(20, 2\);             /* Create multipolexer                           */)A
108 240 :M
-.403(  demux = NewDemux\(30, 2, router\);   /* Create demultiplexer                          */)A
108 250 :M
-.403(  buf0 = NewBuffer\(40, bufsz\);       /* Create buffers                                */)A
108 260 :M
-.412(  buf1 = NewBuffer\(41, bufsz\);)A
108 270 :M
-.403(  outport0 = NewOPort\(50, 2\);        /* Create ouput ports                            */)A
108 280 :M
-.413(  outport1 = NewOPort\(51, 2\);)A
108 300 :M
-.403(  /* Connect modules to make the network:                                             */)A
108 310 :M
-.403(  /*   This network is a 2 x 2 switch realized as a bus with buffers on its outputs   */)A
108 320 :M
-.403(  /*   It consists of a 2-input MUX followed by a 2-ouput demux                       */)A
108 340 :M
-.403(  NetworkConnect\(inport0,mux,0,0\);   /* Input port 0 connected to terminal 0 of mux   */)A
108 350 :M
-.403(  NetworkConnect\(inport1,mux,0,1\);   /* Input port 1 connected to terminal 1 of mux   */)A
108 370 :M
-.403(  NetworkConnect\(mux,demux,0,0\);     /* Mux output connected to demux input           */)A
108 390 :M
-.403(  NetworkConnect\(demux,buf0,0,0\);    /* Demux terminal 0 connected to buffer 0        */)A
108 400 :M
-.403(  NetworkConnect\(demux,buf1,1,0\);    /* Demux terminal 1 connected to buffer 1        */)A
108 420 :M
-.403(  NetworkConnect\(buf0,outport0,0,0\); /* Buffer 0 connected to output port 0           */)A
108 430 :M
-.403(  NetworkConnect\(buf1,outport1,0,0\); /* Buffer 1 connected to output port 1           */)A
108 450 :M
-.403(  process = NewProcess\("UserSend0",UserProcessS,0\);  /* Create sender process 0       */)A
108 460 :M
-.403(  ActivitySetArg\(process,NULL,0\);                    /* Pass process its id           */)A
108 470 :M
-.403(  ActivitySchedTime\(process, 0.0, INDEPENDENT\);      /* Schedule process              */)A
108 490 :M
-.403(  process = NewProcess\("UserSend1",UserProcessS,0\);  /* Create sender process 1       */)A
108 500 :M
-.403(  ActivitySetArg\(process,NULL,1\);                    /* Pass process its id           */)A
108 510 :M
-.403(  ActivitySchedTime\(process, 0.0, INDEPENDENT\);      /* Schedule process              */)A
108 530 :M
-.403(  process = NewProcess\("UserRecv0",UserProcessR,0\);  /* Create receiver process 0     */)A
108 540 :M
-.403(  ActivitySetArg\(process,NULL,0\);                    /* Pass process its id           */)A
108 550 :M
-.403(  ActivitySchedTime\(process, 0.0, INDEPENDENT\);      /* Schedule process              */)A
108 570 :M
-.403(  process = NewProcess\("UserRecv1",UserProcessR,0\);  /* Create receiver process 1     */)A
108 580 :M
-.403(  ActivitySetArg\(process,NULL,1\);                    /* Pass process its id           */)A
108 590 :M
-.403(  ActivitySchedTime\(process, 0.0, INDEPENDENT\);      /* Schedule process              */)A
108 610 :M
-.403(  NetworkCollectStats\(NETTIME,NOHIST,0.0,0.0\);       /* Collect Statistics            */)A
108 620 :M
-.408(  NetworkCollectStats\(BLKTIME,NOHIST,0.0,0.0\);)A
108 630 :M
-.407(  NetworkCollectStats\(OPORTTIME,NOHIST,0.0,0.0\);)A
108 640 :M
-.407(  NetworkCollectStats\(MOVETIME,NOHIST,0.0,0.0\);)A
108 650 :M
-.407(  NetworkCollectStats\(LIFETIME,NOHIST,0.0,0.0\);)A
108 670 :M
-.403(  DriverRun\(0.0\);                                    /* Start the simulation          */)A
108 690 :M
-.403(  NetworkStatRept\(\);                                 /* Print statistics              */)A
108 700 :M
(})S
endp
%%Page: 19 19
%%BeginPageSetup
initializepage
(; page: 19 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
72 59 :M
f4_12 sf
.855(Examples)A
542 59 :M
2.658(16)A
70 63 -1 1 560 62 1 70 62 @a
72 93 :M
f8_12 sf
3.105 .31(3.2.  SWITCH #2)J
72 117 :M
f7_12 sf
-.065(This network is also a 2 by 2 switch, but it is realized as a crossbar with buffers on its input terminals)A
72 129 :M
-.046(as show in Fig. 5.  It uses two multiplexers with their outputs connected to the inputs of two)A
72 141 :M
-.058(demultiplexers providing four possible paths from input ports to output ports.  Therefore, two packets)A
72 153 :M
-.137(could be transmitted through the switch at the same time if they are directed to different output)A
72 165 :M
-.072(terminals.)A
:a
36 <3049883AB59CF039
><3030304949498888883A3A3AB5B5B59C9C9CF0F0F0393939
>fg bk :b
196 180 237 57 rC
:e
0 G
352 200 :M
%%DSIDICT:_cv
currentdict /bu known {bu}if
userdict /_cv known not{userdict /_cv 30 dict put}if
_cv begin
/bdf{bind def}bind def
currentscreen/cs exch def/ca exch def/cf exch def
systemdict/setcmykcolor known{/cvcmyk /setcmykcolor load def}{/cvcmyk{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll}repeat setrgbcolor pop}bdf}ifelse
/ss{//cf //ca //cs setscreen}bdf
/stg{ss setgray}bdf
/strgb{ss setrgbcolor}bdf
/stcmyk{ss cvcmyk}bdf
/min1{dup 0 eq{pop 1}if}bdf
end
currentdict /bn known {bn}if
1 G
248 216 37 17 rF
0 G
248.5 216.5 36 16 rS
236 225 -1 1 249 224 1 236 224 @a
284 225 -1 1 297 224 1 284 224 @a
284 224 :M
psb
pse
1 G
np 364 236 :M
364 212 :L
380 224 :L
364 236 :L
:K
eofill
0 G
-1 -1 365 237 1 1 364 212 @b
364 213 -1 1 381 224 1 364 212 @a
-1 -1 365 237 1 1 380 224 @b
352 217 -1 1 365 216 1 352 216 @a
352 233 -1 1 365 232 1 352 232 @a
380 225 -1 1 393 224 1 380 224 @a
380 224 :M
psb
pse
1 G
np 324 204 :M
324 180 :L
308 192 :L
324 204 :L
:K
eofill
0 G
-1 -1 325 205 1 1 324 180 @b
-1 -1 309 193 1 1 324 180 @b
308 193 -1 1 325 204 1 308 192 @a
324 185 -1 1 337 184 1 324 184 @a
324 201 -1 1 337 200 1 324 200 @a
296 193 -1 1 309 192 1 296 192 @a
420 221 -1 1 425 224 1 420 220 @a
-1 -1 417 233 1 1 424 224 @b
416 217 -1 1 421 220 1 416 216 @a
400 217 -1 1 417 216 1 400 216 @a
-1 -1 401 233 1 1 400 216 @b
400 233 -1 1 417 232 1 400 232 @a
392 225 -1 1 401 224 1 392 224 @a
424 225 -1 1 433 224 1 424 224 @a
-1 -1 205 193 1 1 208 188 @b
204 193 -1 1 213 200 1 204 192 @a
-1 -1 209 189 1 1 212 184 @b
212 185 -1 1 229 184 1 212 184 @a
-1 -1 229 201 1 1 228 184 @b
212 201 -1 1 229 200 1 212 200 @a
196 193 -1 1 205 192 1 196 192 @a
228 193 -1 1 237 192 1 228 192 @a
-1 -1 205 225 1 1 208 220 @b
204 225 -1 1 213 232 1 204 224 @a
-1 -1 209 221 1 1 212 216 @b
212 217 -1 1 229 216 1 212 216 @a
-1 -1 229 233 1 1 228 216 @b
212 233 -1 1 229 232 1 212 232 @a
196 225 -1 1 205 224 1 196 224 @a
228 225 -1 1 237 224 1 228 224 @a
228 224 :M
psb
pse
1 G
np 364 204 :M
364 180 :L
380 192 :L
364 204 :L
:K
eofill
0 G
-1 -1 365 205 1 1 364 180 @b
364 181 -1 1 381 192 1 364 180 @a
-1 -1 365 205 1 1 380 192 @b
352 185 -1 1 365 184 1 352 184 @a
352 201 -1 1 365 200 1 352 200 @a
380 193 -1 1 393 192 1 380 192 @a
380 192 :M
psb
pse
1 G
np 324 236 :M
324 212 :L
308 224 :L
324 236 :L
:K
eofill
0 G
-1 -1 325 237 1 1 324 212 @b
-1 -1 309 225 1 1 324 212 @b
308 225 -1 1 325 236 1 308 224 @a
324 217 -1 1 337 216 1 324 216 @a
324 233 -1 1 337 232 1 324 232 @a
296 225 -1 1 309 224 1 296 224 @a
1 G
248 184 37 17 rF
0 G
248.5 184.5 36 16 rS
236 193 -1 1 249 192 1 236 192 @a
284 193 -1 1 297 192 1 284 192 @a
420 189 -1 1 425 192 1 420 188 @a
-1 -1 417 201 1 1 424 192 @b
416 185 -1 1 421 188 1 416 184 @a
400 185 -1 1 417 184 1 400 184 @a
-1 -1 401 201 1 1 400 184 @b
400 201 -1 1 417 200 1 400 200 @a
392 193 -1 1 401 192 1 392 192 @a
424 193 -1 1 433 192 1 424 192 @a
332 185 -1 1 357 184 1 332 184 @a
332 233 -1 1 357 232 1 332 232 @a
336 201 -1 1 353 216 1 336 200 @a
-1 -1 337 217 1 1 352 200 @b
gR
gS 31 31 552 730 rC
211 262 :M
f7_12 sf
.059 .006(Fig. 5.  2)J
f10_12 sf
(\264)S
f7_12 sf
.106 .011(2 Switch Realized as a Crossbar.)J
72 287 :M
f5_12 sf
4.136 .414(Program Listing:)J
72 311 :M
f7_12 sf
-.101(The only differences between this program and the one for Switch #1 are in the routine UserMain)A
72 323 :M
-.026(listed below.)A
108 346 :M
f12_9 sf
-.42(UserMain\(argc, argv\))A
108 356 :M
-.449(int argc;)A
108 366 :M
-.435(char** argv;)A
108 376 :M
({)S
108 386 :M
-.421(  PROCESS* process;)A
108 396 :M
-.416(  BUFFER   *buf0, *buf1;)A
108 406 :M
-.416(  MUX      *mux0, *mux1;)A
108 416 :M
-.413(  DEMUX    *demux0, *demux1;)A
108 436 :M
-.403(  if \(argc > 1\)                      /* 1st argument is the number of packets         */)A
108 446 :M
-.415(     npkt = atoi\(argv[1]\);)A
108 456 :M
-.403(  if \(argc > 2\)                      /* 2nd argument is the packet size               */)A
108 466 :M
-.414(     pktsz = atoi\(argv[2]\);)A
108 476 :M
-.403(  if \(argc > 3\)                      /* 3rd argument is the buffer size               */)A
108 486 :M
-.414(     bufsz = atoi\(argv[3]\);)A
108 496 :M
-.403(  if \(argc > 4\)                      /* 4th argument is the extra send delay          */)A
108 506 :M
-.409(     send_delay = \(double\)atoi\(argv[4]\);)A
108 516 :M
-.403(  if \(argc > 5\)                      /* 5th argument is the extra receive delay       */)A
108 526 :M
-.409(     recv_delay = \(double\)atoi\(argv[5]\);)A
108 546 :M
-.403(  NetworkSetFlitDelay\(1\);            /* All delays set to 1 times cycle time          */)A
108 556 :M
-.416(  NetworkSetMuxDelay\(1\);)A
108 566 :M
-.416(  NetworkSetArbDelay\(1\);)A
108 576 :M
-.415(  NetworkSetDemuxDelay\(1\);)A
108 586 :M
-.416(  NetworkSetPktDelay\(1\);)A
108 596 :M
-.416(  NetworkSetWFT\(NOWAIT\);)A
108 616 :M
-.403(  inport0 = NewIPort\(10, 2\);         /* Create input ports                            */)A
108 626 :M
-.413(  inport1 = NewIPort\(11, 2\);)A
108 636 :M
-.403(  buf0 = NewBuffer\(20, bufsz,1\);     /* Create buffers                                */)A
108 646 :M
-.412(  buf1 = NewBuffer\(21, bufsz,1\);)A
108 656 :M
-.403(  demux0 = NewDemux\(30, 2, router\);  /* Create demultiplexers                         */)A
108 666 :M
-.41(  demux1 = NewDemux\(31, 2, router\);)A
108 676 :M
-.403(  mux0   = NewMux\(40, 2\);            /* Create multiplexers                           */)A
108 686 :M
-.415(  mux1   = NewMux\(41, 2\);)A
108 696 :M
-.403(  outport0 = NewOPort\(50, 2\);        /* Create ouput ports                            */)A
108 706 :M
-.413(  outport1 = NewOPort\(51, 2\);)A
108 726 :M
-.403(  /* Connect modules to make the network:                                             */)A
endp
%%Page: 20 20
%%BeginPageSetup
initializepage
(; page: 20 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
72 59 :M
f4_12 sf
.855(Examples)A
542 59 :M
2.658(17)A
70 63 -1 1 560 62 1 70 62 @a
108 80 :M
f12_9 sf
-.403(  /*   This network is a 2 x 2 switch realized as a crossbar with buffers on its      */)A
108 90 :M
-.403(  /*   outputs.  It consists of two 2-output demultiplexers followed by two 2-input   */)A
108 100 :M
-.403(  /*   multiplexers                                                                   */)A
108 120 :M
-.403(  NetworkConnect\(inport0,buf0,0,0\);   /* Input port 0 connected to buffer 0           */)A
108 130 :M
-.403(  NetworkConnect\(inport1,buf1,0,0\);   /* Input port 1 connected to buffer 1           */)A
108 150 :M
-.403(  NetworkConnect\(buf0,demux0,0,0\);    /* Buffer 0 connected to demux 0                */)A
108 160 :M
-.403(  NetworkConnect\(buf1,demux1,0,0\);    /* Buffer 1 connected to demux 1                */)A
108 180 :M
-.403(  NetworkConnect\(demux0,mux0,0,0\);    /* Demux 0, term 0 connected to mux 0, term 0   */)A
108 190 :M
-.403(  NetworkConnect\(demux0,mux1,1,0\);    /* Demux 0, term 1 connected to mux 1, term 0   */)A
108 200 :M
-.403(  NetworkConnect\(demux1,mux0,0,1\);    /* Demux 1, term 0 connected to mux 0, term 1   */)A
108 210 :M
-.403(  NetworkConnect\(demux1,mux1,1,1\);    /* Demux 1, term 1 connected to mux 1, term 1   */)A
108 230 :M
-.403(  NetworkConnect\(mux0,outport0,0,0\);  /* Mux 0 connected to output port 0             */)A
108 240 :M
-.403(  NetworkConnect\(mux1,outport1,0,0\);  /* Mux 1 connected to output port 1             */)A
108 260 :M
-.403(  process = NewProcess\("UserSend0",UserProcessS,0\);  /* Create sender process 0       */)A
108 270 :M
-.403(  ActivitySetArg\(process,NULL,0\);                    /* Pass process its id           */)A
108 280 :M
-.403(  ActivitySchedTime\(process, 0.0, INDEPENDENT\);      /* Schedule process              */)A
108 300 :M
-.403(  process = NewProcess\("UserSend1",UserProcessS,0\);  /* Create sender process 1       */)A
108 310 :M
-.403(  ActivitySetArg\(process,NULL,1\);                    /* Pass process its id           */)A
108 320 :M
-.403(  ActivitySchedTime\(process, 0.0, INDEPENDENT\);      /* Schedule process              */)A
108 340 :M
-.403(  process = NewProcess\("UserRecv0",UserProcessR,0\);  /* Create receiver process 0     */)A
108 350 :M
-.403(  ActivitySetArg\(process,NULL,0\);                    /* Pass process its id           */)A
108 360 :M
-.403(  ActivitySchedTime\(process, 0.0, INDEPENDENT\);      /* Schedule process              */)A
108 380 :M
-.403(  process = NewProcess\("UserRecv1",UserProcessR,0\);  /* Create receiver process 1     */)A
108 390 :M
-.403(  ActivitySetArg\(process,NULL,1\);                    /* Pass process its id           */)A
108 400 :M
-.403(  ActivitySchedTime\(process, 0.0, INDEPENDENT\);      /* Schedule process              */)A
108 420 :M
-.403(  NetworkCollectStats\(NETTIME,NOHIST,0.0,0.0\);       /* Collect Statistics            */)A
108 430 :M
-.408(  NetworkCollectStats\(BLKTIME,NOHIST,0.0,0.0\);)A
108 440 :M
-.407(  NetworkCollectStats\(OPORTTIME,NOHIST,0.0,0.0\);)A
108 450 :M
-.407(  NetworkCollectStats\(MOVETIME,NOHIST,0.0,0.0\);)A
108 460 :M
-.407(  NetworkCollectStats\(LIFETIME,NOHIST,0.0,0.0\);)A
108 480 :M
-.403(  DriverRun\(0.0\);                                    /* Start the simulation          */)A
108 500 :M
-.403(  NetworkStatRept\(\);                                 /* Print statistics              */)A
108 510 :M
(})S
endp
%%Page: 21 21
%%BeginPageSetup
initializepage
(; page: 21 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
542 739 :M
f4_12 sf
2.658(18)A
158 86 :M
f8_18 sf
2.692 .269(APPENDIX 1:  DEFINED SYMBOLS)J
72 129 :M
f7_12 sf
-.079(This appendix list symbols defined in the file sim.h that are used as arguments to NETSIM operations.)A
72 141 :M
-.09(They are described in the discussions of the operations that use them and are only listed here.)A
108 177 :M
f8_12 sf
3.341 .334(Routing Modes:)J
144 201 :M
f7_12 sf
-.328(NOWAIT)A
252 201 :M
(0)S
144 213 :M
-.437(WAIT)A
252 213 :M
(1)S
108 237 :M
f8_12 sf
3.901 .39(Statistics Constants:)J
144 261 :M
f7_12 sf
-.274(NETTIME)A
252 261 :M
(1)S
144 273 :M
-.22(BLKTIME)A
252 273 :M
(2)S
144 285 :M
-.331(OPORTTIME)A
252 285 :M
(3)S
144 297 :M
-.521(MOVETIME)A
252 297 :M
(4)S
144 309 :M
-.235(LIFETIME)A
252 309 :M
(5)S
144 333 :M
.114(HIST)A
252 333 :M
(2)S
288 333 :M
-.132(\(Also used in YACSIM\))A
144 345 :M
(NOHIST)S
252 345 :M
(3)S
288 345 :M
-.132(\(Also used in YACSIM\))A
endp
%%Page: 22 22
%%BeginPageSetup
initializepage
(; page: 22 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
542 739 :M
f4_12 sf
2.658(19)A
123 86 :M
f8_18 sf
2.51 .251(APPENDIX 2: SUMMARY OF OPERATIONS)J
219 125 :M
f8_12 sf
3.144 .314(Network Construction Operations)J
68 116 -1 2 70 114 1 68 114 @a
-1 -2 70 116 1 2 68 114 @b
70 116 -1 2 560 114 1 70 114 @a
560 116 -1 2 562 114 1 560 114 @a
-1 -2 562 116 1 2 560 114 @b
68 130 -1 2 70 128 1 68 128 @a
-1 -2 70 130 1 2 68 128 @b
70 130 -1 2 560 128 1 70 128 @a
560 130 -1 2 562 128 1 560 128 @a
-1 -2 562 130 1 2 560 128 @b
-1 -2 70 128 1 2 68 116 @b
-1 -2 562 128 1 2 560 116 @b
72 145 :M
f7_10 sf
-.153(BUFFER *NewBuffer\(id,sz\))A
315 145 :M
-.002(/* Creates & returns a pointer to a new network buffer)A
550 145 :M
.222(*/)A
72 156 :M
-.104(MUX *NewMux\(id,fanin\))A
315 156 :M
.105 .01(/* Creates & returns a pointer to a new multiplexer)J
550 156 :M
.222(*/)A
72 167 :M
-.086(DEMUX *NewDemux\(id,fanout,routingfcn\))A
315 167 :M
.058 .006(/* Creates & returns a pointer to a new demux )J
550 167 :M
.222(*/)A
72 178 :M
-.093(IPORT *NewIport\(id,sz\))A
315 178 :M
(/* Creates and returns a pointer to a new iport)S
550 178 :M
.222(*/)A
72 189 :M
-.062(OPORT *NewOPort\(id,sz\))A
315 189 :M
-.004(/* Creates and returns a pointer to a new oport)A
550 189 :M
.222(*/)A
72 200 :M
-.102(void NetworkConnect\(source, dest, src_index, dest_index\))A
315 200 :M
.12 .012(/* Connects two modules)J
550 200 :M
.222(*/)A
240 219 :M
f8_12 sf
2.956 .296(Network Delay Operations)J
68 210 -1 2 70 208 1 68 208 @a
-1 -2 70 210 1 2 68 208 @b
70 210 -1 2 560 208 1 70 208 @a
560 210 -1 2 562 208 1 560 208 @a
-1 -2 562 210 1 2 560 208 @b
68 224 -1 2 70 222 1 68 222 @a
-1 -2 70 224 1 2 68 222 @b
70 224 -1 2 560 222 1 70 222 @a
560 224 -1 2 562 222 1 560 222 @a
-1 -2 562 224 1 2 560 222 @b
-1 -2 70 222 1 2 68 210 @b
-1 -2 562 222 1 2 560 210 @b
72 239 :M
f7_10 sf
-.082(void NetworkSetCycleTime\(x\))A
315 239 :M
.354 .035(/* Sets the cycle time. All other times a multiple of it)J
550 239 :M
.222(*/)A
72 250 :M
-.095(void NetworkSetFlitDelay\(d\))A
315 250 :M
.211 .021(/* Sets the flit delay )J
550 250 :M
.222(*/)A
72 261 :M
-.138(void NetworkSetMuxDelay\(d\))A
315 261 :M
.059 .006(/* Sets the MUX delay)J
550 261 :M
.222(*/)A
72 272 :M
-.165(void NetworkSetArbDelay\(d\))A
315 272 :M
.261 .026(/* Sets the multiplexer arbitration time)J
550 272 :M
.222(*/)A
72 283 :M
-.148(void NetworkSetDemuxDelay\(d\))A
315 283 :M
-.012(/* Sets the demultplexer routing delay)A
550 283 :M
.222(*/)A
72 294 :M
-.116(void NetworkSetPktDelay\(d\))A
315 294 :M
-.018(/* Sets the packet delay)A
550 294 :M
.222(*/)A
227 313 :M
f8_12 sf
3.056 .306(Network Threshold Operations)J
68 304 -1 2 70 302 1 68 302 @a
-1 -2 70 304 1 2 68 302 @b
70 304 -1 2 560 302 1 70 302 @a
560 304 -1 2 562 302 1 560 302 @a
-1 -2 562 304 1 2 560 302 @b
68 318 -1 2 70 316 1 68 316 @a
-1 -2 70 318 1 2 68 316 @b
70 318 -1 2 560 316 1 70 316 @a
560 318 -1 2 562 316 1 560 316 @a
-1 -2 562 318 1 2 560 316 @b
-1 -2 70 316 1 2 68 304 @b
-1 -2 562 316 1 2 560 304 @b
72 333 :M
f7_10 sf
-.097(void NetworkSetThresh\(i\))A
315 333 :M
-.025(/* Sets buffer threshold)A
550 333 :M
.222(*/)A
72 344 :M
-.079(void NetworkSetWFT\(t\))A
315 344 :M
-.01(/* Sets wait-for-tail flag: t = WAIT or NOWAIT)A
550 344 :M
.222(*/)A
264 363 :M
f8_12 sf
2.704 .27(Packet Operations)J
68 354 -1 2 70 352 1 68 352 @a
-1 -2 70 354 1 2 68 352 @b
70 354 -1 2 560 352 1 70 352 @a
560 354 -1 2 562 352 1 560 352 @a
-1 -2 562 354 1 2 560 352 @b
68 368 -1 2 70 366 1 68 366 @a
-1 -2 70 368 1 2 68 366 @b
70 368 -1 2 560 366 1 70 366 @a
560 368 -1 2 562 366 1 560 366 @a
-1 -2 562 368 1 2 560 366 @b
-1 -2 70 366 1 2 68 354 @b
-1 -2 562 366 1 2 560 354 @b
72 383 :M
f7_10 sf
-.066(PACKET *NewPacket\(seqno,msgptr,sz,src,dest\))A
315 383 :M
.072 .007(/* Creates & returns a ptr to a packet)J
550 383 :M
.222(*/)A
72 394 :M
-.093(double PacketSend\(pkt,port\))A
315 394 :M
.066 .007(/* Sends a packet through a network input port)J
550 394 :M
.222(*/)A
72 405 :M
-.077(PACKET *PacketReceive\(port\))A
315 405 :M
.024 .002(/* Receives a packet from a network output port)J
550 405 :M
.222(*/)A
72 416 :M
-.098(PKTDATA *PacketGetData\(pkt\))A
315 416 :M
-.018(/* Returns a pointer to a packet's user accessible data)A
550 416 :M
.222(*/)A
72 427 :M
-.112(void PacketFree\(pkt\))A
315 427 :M
.034 .003(/* Returns a packet to the pool of free packets)J
550 427 :M
.222(*/)A
216 446 :M
f8_12 sf
3.084 .308(Packet Synchronization Operations)J
68 437 -1 2 70 435 1 68 435 @a
-1 -2 70 437 1 2 68 435 @b
70 437 -1 2 560 435 1 70 435 @a
560 437 -1 2 562 435 1 560 435 @a
-1 -2 562 437 1 2 560 435 @b
68 451 -1 2 70 449 1 68 449 @a
-1 -2 70 451 1 2 68 449 @b
70 451 -1 2 560 449 1 70 449 @a
560 451 -1 2 562 449 1 560 449 @a
-1 -2 562 451 1 2 560 449 @b
-1 -2 70 449 1 2 68 437 @b
-1 -2 562 449 1 2 560 437 @b
72 466 :M
f7_10 sf
-.019(SEMAPHORE *IPortSemaphore\(iptr\))A
315 466 :M
.141 .014(/* Returns a pointer to an iport's PortReady sema)J
550 466 :M
.222(*/)A
72 477 :M
-.036(int IPortSpace\(port\))A
315 477 :M
.035 .003(/* Returns # of free packet spaces in an iport)J
550 477 :M
.222(*/)A
72 488 :M
-.054(int IPortGetId\(port\) )A
315 488 :M
.009 .001(/* Returns user assigned id of an iport)J
550 488 :M
.222(*/)A
72 499 :M
-.023(SEMAPHORE *OPortSemaphore\(optr\))A
315 499 :M
.136 .014(/* Returns a pointer to an oport's semaphore)J
550 499 :M
.222(*/)A
72 510 :M
-.012(int OPortPackets\(port\))A
315 510 :M
.112 .011(/* Returns # of packets available in an oport)J
550 510 :M
.222(*/)A
72 521 :M
-.048(int OPortGetId\(port\) )A
315 521 :M
.032 .003(/* Returns the user assigned ID of an oport)J
550 521 :M
.222(*/)A
230 540 :M
f8_12 sf
3.345 .335(Network Statistics Operations)J
68 531 -1 2 70 529 1 68 529 @a
-1 -2 70 531 1 2 68 529 @b
70 531 -1 2 560 529 1 70 529 @a
560 531 -1 2 562 529 1 560 529 @a
-1 -2 562 531 1 2 560 529 @b
68 545 -1 2 70 543 1 68 543 @a
-1 -2 70 545 1 2 68 543 @b
70 545 -1 2 560 543 1 70 543 @a
560 545 -1 2 562 543 1 560 543 @a
-1 -2 562 545 1 2 560 543 @b
-1 -2 70 543 1 2 68 531 @b
-1 -2 562 543 1 2 560 531 @b
72 560 :M
f7_10 sf
.235 .024(void NetworkCollectStats\(type,histflg,nbin,low,high\))J
315 560 :M
.08 .008(/* Activates automatic statistics collection for the network)J
550 560 :M
.222(*/)A
72 571 :M
-.068(void NetworkResetStats\(\))A
315 571 :M
(/* Resets all network statistics records)S
550 571 :M
.222(*/)A
72 582 :M
(STATREC *NetworkStatPtr\(type\))S
315 582 :M
.031 .003(/* Returns a pointer to a network statistics record)J
550 582 :M
.222(*/)A
72 593 :M
-.065(void NetworkStatRept\(\))A
315 593 :M
.207 .021(/* Prints a report of network statistics)J
550 593 :M
.222(*/)A
endp
%%Page: 23 23
%%BeginPageSetup
initializepage
(; page: 23 of 23)setjob
%%EndPageSetup
-31 -31 :T
gS 31 31 552 730 rC
542 739 :M
f4_12 sf
2.658(20)A
93 86 :M
f8_18 sf
2.193 .219(APPENDIX 3:  ALPHABETICAL OPERATION LIST)J
108 117 :M
f7_12 sf
-.063(IportGetId\(port\))A
510 117 :M
(10)S
108 129 :M
-.067(IPortSemaphore\(port\))A
510 129 :M
(10)S
108 141 :M
-.086(IportSpace\(port\))A
510 141 :M
(10)S
108 153 :M
-.012(NetworkCollectStats\(type,histflg,nbin,lowbin,highbin\))A
510 153 :M
(12)S
108 165 :M
.012 .001(NetworkConnect\(src, dest, src_index, dest_index\))J
516 165 :M
(7)S
108 177 :M
-.053(NetworkResetStats\(\))A
510 177 :M
(12)S
108 189 :M
-.13(NetworkSetArbDelay\(d\))A
516 189 :M
(8)S
108 201 :M
-.124(NetworkSetCycleTime\(x\))A
516 201 :M
(7)S
108 213 :M
-.149(NetworkSetDemuxDelay\(d\))A
516 213 :M
(8)S
108 225 :M
-.125(NetworkSetFlitDelay\(d\))A
516 225 :M
(7)S
108 237 :M
-.131(NetworkSetMuxDelay\(d\))A
516 237 :M
(8)S
108 249 :M
-.098(NetworkSetPktDelay\(d\))A
516 249 :M
(8)S
108 261 :M
-.053(NetworkSetThresh\(t\))A
516 261 :M
(8)S
108 273 :M
-.064(NetworkSetWFT\(i\))A
516 273 :M
(8)S
108 285 :M
-.068(NetworkStatPtr\(type\))A
510 285 :M
(12)S
108 297 :M
-.081(NetworkStatRept\(\))A
510 297 :M
(12)S
108 309 :M
.023 .002(NewBuffer\(id, size\))J
516 309 :M
(6)S
108 321 :M
-.03(NewDemux\(id, fanout, routingfcn\))A
516 321 :M
(6)S
108 333 :M
.142 .014(NewIPort\(id, size\))J
516 333 :M
(7)S
108 345 :M
-.018(NewMux\(id, fanin\))A
516 345 :M
(6)S
108 357 :M
-.017(NewOPort\(id, size\))A
516 357 :M
(7)S
108 369 :M
.261 .026(NewPacket\(seqno, msgptr, size, src, dest\))J
516 369 :M
(9)S
108 381 :M
-.116(OportGetIdport\))A
510 381 :M
(11)S
108 393 :M
-.115(OportPackets\(port\))A
510 393 :M
(10)S
108 405 :M
-.103(OPortSemaphore\(port\))A
510 405 :M
(10)S
108 417 :M
-.116(PacketFree\(pkt\))A
510 417 :M
(10)S
108 429 :M
-.193(PacketGetData\(pkt\))A
516 429 :M
(9)S
108 441 :M
-.163(PacketReceive\(port\))A
516 441 :M
(9)S
108 453 :M
-.031(PacketSend\(pkt, port\))A
516 453 :M
(9)S
endp
%%Trailer
end		% md
%%EOF
